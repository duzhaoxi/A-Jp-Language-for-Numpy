/*
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class JpGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JpModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsJpElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cScriptsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptsJpScriptParserRuleCall_2_0 = (RuleCall)cScriptsAssignment_2.eContents().get(0);
		
		//JpModel:
		//    importSection=XImportSection?
		//    elements+=JpElement*
		//    scripts=JpScript?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//importSection=XImportSection?
		//elements+=JpElement*
		//scripts=JpScript?
		public Group getGroup() { return cGroup; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }
		
		//elements+=JpElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//JpElement
		public RuleCall getElementsJpElementParserRuleCall_1_0() { return cElementsJpElementParserRuleCall_1_0; }
		
		//scripts=JpScript?
		public Assignment getScriptsAssignment_2() { return cScriptsAssignment_2; }
		
		//JpScript
		public RuleCall getScriptsJpScriptParserRuleCall_2_0() { return cScriptsJpScriptParserRuleCall_2_0; }
	}
	public class JpScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAuthorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAuthorIDTerminalRuleCall_3_0 = (RuleCall)cAuthorAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cSuperTypeAssignment_4_1.eContents().get(0);
		private final Assignment cOperationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperationsJpOperationParserRuleCall_5_0 = (RuleCall)cOperationsAssignment_5.eContents().get(0);
		private final Assignment cScriptBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScriptBodyJpScriptBodyParserRuleCall_6_0 = (RuleCall)cScriptBodyAssignment_6.eContents().get(0);
		
		//JpScript:
		//    'script' name=ValidID 'by' author=ID (=>'extends' superType=JvmParameterizedTypeReference)?
		//    operations+=JpOperation*
		//    scriptBody=JpScriptBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'script' name=ValidID 'by' author=ID (=>'extends' superType=JvmParameterizedTypeReference)?
		//operations+=JpOperation*
		//scriptBody=JpScriptBody
		public Group getGroup() { return cGroup; }
		
		//'script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'by'
		public Keyword getByKeyword_2() { return cByKeyword_2; }
		
		//author=ID
		public Assignment getAuthorAssignment_3() { return cAuthorAssignment_3; }
		
		//ID
		public RuleCall getAuthorIDTerminalRuleCall_3_0() { return cAuthorIDTerminalRuleCall_3_0; }
		
		//(=>'extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_4() { return cGroup_4; }
		
		//=>'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_4_1() { return cSuperTypeAssignment_4_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_4_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_4_1_0; }
		
		//operations+=JpOperation*
		public Assignment getOperationsAssignment_5() { return cOperationsAssignment_5; }
		
		//JpOperation
		public RuleCall getOperationsJpOperationParserRuleCall_5_0() { return cOperationsJpOperationParserRuleCall_5_0; }
		
		//scriptBody=JpScriptBody
		public Assignment getScriptBodyAssignment_6() { return cScriptBodyAssignment_6; }
		
		//JpScriptBody
		public RuleCall getScriptBodyJpScriptBodyParserRuleCall_6_0() { return cScriptBodyJpScriptBodyParserRuleCall_6_0; }
	}
	public class JpScriptBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpScriptBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScriptBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsJpStatementOrBlockParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//JpScriptBody returns XBlockExpression:
		//    {ScriptBody}
		//    (expressions+=JpStatementOrBlock ';'?)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ScriptBody}
		//(expressions+=JpStatementOrBlock ';'?)*
		public Group getGroup() { return cGroup; }
		
		//{ScriptBody}
		public Action getScriptBodyAction_0() { return cScriptBodyAction_0; }
		
		//(expressions+=JpStatementOrBlock ';'?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//expressions+=JpStatementOrBlock
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }
		
		//JpStatementOrBlock
		public RuleCall getExpressionsJpStatementOrBlockParserRuleCall_1_0_0() { return cExpressionsJpStatementOrBlockParserRuleCall_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class JpElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJpPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJpClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JpElement:
		//    JpPackageDeclaration | JpClass;
		@Override public ParserRule getRule() { return rule; }
		
		//JpPackageDeclaration | JpClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JpPackageDeclaration
		public RuleCall getJpPackageDeclarationParserRuleCall_0() { return cJpPackageDeclarationParserRuleCall_0; }
		
		//JpClass
		public RuleCall getJpClassParserRuleCall_1() { return cJpClassParserRuleCall_1; }
	}
	public class JpPackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpPackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsJpElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JpPackageDeclaration:
		//    'package' name=QualifiedName '{'
		//        elements+=JpElement*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{'
		//    elements+=JpElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=JpElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//JpElement
		public RuleCall getElementsJpElementParserRuleCall_3_0() { return cElementsJpElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class JpClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesJpFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JpClass:
		//    'class' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		//        features+=JpFeature*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
		//    features+=JpFeature*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('extends' superType=JvmParameterizedTypeReference)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//features+=JpFeature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//JpFeature
		public RuleCall getFeaturesJpFeatureParserRuleCall_4_0() { return cFeaturesJpFeatureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class JpFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJpPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJpOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JpFeature:
		//    JpProperty | JpOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JpProperty | JpOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JpProperty
		public RuleCall getJpPropertyParserRuleCall_0() { return cJpPropertyParserRuleCall_0; }
		
		//JpOperation
		public RuleCall getJpOperationParserRuleCall_1() { return cJpOperationParserRuleCall_1; }
	}
	public class JpPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//JpProperty:
		//    name=ValidID ':' type=JvmTypeReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=JvmTypeReference
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }
	}
	public class JpOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//JpOperation:
		//    'def' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':' type=JvmTypeReference)?
		//    body=XBlockExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':' type=JvmTypeReference)?
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }
		
		//(',' params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(':' type=JvmTypeReference)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_5_1_0() { return cTypeJvmTypeReferenceParserRuleCall_5_1_0; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}
	public class JpStatementOrBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpStatementOrBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBlockExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJpSingleStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**
		// * refer JBase
		// * The syntactic predicate on XBlockExpression is required to avoid
		// * ambiguity with array literal.  However, XBlockExpression must come first, to
		// * be able to parse both while(...) {} and while(...) st; for example.
		// * If we put the predicate on single statement, then it does not seem to
		// * be possible to parse incomplete member feature call.
		// */
		//JpStatementOrBlock returns XExpression:
		////    JpArrayConstructorCall | not a valid statement
		//    =>XBlockExpression |
		//    JpSingleStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    JpArrayConstructorCall | not a valid statement
		//    =>XBlockExpression |
		//    JpSingleStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////    JpArrayConstructorCall | not a valid statement
		//    =>XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_0() { return cXBlockExpressionParserRuleCall_0; }
		
		//JpSingleStatement
		public RuleCall getJpSingleStatementParserRuleCall_1() { return cJpSingleStatementParserRuleCall_1; }
	}
	public class JpSingleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpSingleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXForLoopExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cJpBranchingStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXExpressionOrVarDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXDoWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cJpWithOpenAsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//JpSingleStatement returns XExpression:
		//    XSwitchExpression |
		//    XIfExpression |
		//    XForLoopExpression |
		//    XBasicForLoopExpression |
		//    XWhileExpression |
		//    XTryCatchFinallyExpression |
		//    XSynchronizedExpression |
		//    JpBranchingStatement |
		//    XExpressionOrVarDeclaration |
		//    XDoWhileExpression |
		//    XReturnExpression |
		//    XThrowExpression |
		//    XSynchronizedExpression |
		//    JpWithOpenAs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XSwitchExpression |
		//XIfExpression |
		//XForLoopExpression |
		//XBasicForLoopExpression |
		//XWhileExpression |
		//XTryCatchFinallyExpression |
		//XSynchronizedExpression |
		//JpBranchingStatement |
		//XExpressionOrVarDeclaration |
		//XDoWhileExpression |
		//XReturnExpression |
		//XThrowExpression |
		//XSynchronizedExpression |
		//JpWithOpenAs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_0() { return cXSwitchExpressionParserRuleCall_0; }
		
		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_1() { return cXIfExpressionParserRuleCall_1; }
		
		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_2() { return cXForLoopExpressionParserRuleCall_2; }
		
		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_3() { return cXBasicForLoopExpressionParserRuleCall_3; }
		
		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_4() { return cXWhileExpressionParserRuleCall_4; }
		
		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_5() { return cXTryCatchFinallyExpressionParserRuleCall_5; }
		
		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_6() { return cXSynchronizedExpressionParserRuleCall_6; }
		
		//JpBranchingStatement
		public RuleCall getJpBranchingStatementParserRuleCall_7() { return cJpBranchingStatementParserRuleCall_7; }
		
		//XExpressionOrVarDeclaration
		public RuleCall getXExpressionOrVarDeclarationParserRuleCall_8() { return cXExpressionOrVarDeclarationParserRuleCall_8; }
		
		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_9() { return cXDoWhileExpressionParserRuleCall_9; }
		
		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }
		
		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }
		
		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_12() { return cXSynchronizedExpressionParserRuleCall_12; }
		
		//JpWithOpenAs
		public RuleCall getJpWithOpenAsParserRuleCall_13() { return cJpWithOpenAsParserRuleCall_13; }
	}
	public class JpBranchingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpBranchingStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cJpContinueStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cContinueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJpBreakStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBreakKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//JpBranchingStatement returns XExpression:
		//    {JpContinueStatement} "continue" |
		//    {JpBreakStatement} "break"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpContinueStatement} "continue" |
		//{JpBreakStatement} "break"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{JpContinueStatement} "continue"
		public Group getGroup_0() { return cGroup_0; }
		
		//{JpContinueStatement}
		public Action getJpContinueStatementAction_0_0() { return cJpContinueStatementAction_0_0; }
		
		//"continue"
		public Keyword getContinueKeyword_0_1() { return cContinueKeyword_0_1; }
		
		//{JpBreakStatement} "break"
		public Group getGroup_1() { return cGroup_1; }
		
		//{JpBreakStatement}
		public Action getJpBreakStatementAction_1_0() { return cJpBreakStatementAction_1_0; }
		
		//"break"
		public Keyword getBreakKeyword_1_1() { return cBreakKeyword_1_1; }
	}
	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOpenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//@Override
		//IdOrSuper :
		//    FeatureCallID | 'super' | 'open'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureCallID | 'super' | 'open'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureCallID
		public RuleCall getFeatureCallIDParserRuleCall_0() { return cFeatureCallIDParserRuleCall_0; }
		
		//'super'
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
		
		//'open'
		public Keyword getOpenKeyword_2() { return cOpenKeyword_2; }
	}
	public class JpWithOpenAsCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpWithOpenAsCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpWithOpenCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//JpWithOpenAsCall returns XFeatureCall:
		//    {JpWithOpenCall}
		//    feature=[types::JvmIdentifiableElement|IdOrSuper]
		//    (=>explicitOperationCall?='('
		//        (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )?
		//    ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpWithOpenCall}
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		//(=>explicitOperationCall?='('
		//    (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )?
		//')')?
		public Group getGroup() { return cGroup; }
		
		//{JpWithOpenCall}
		public Action getJpWithOpenCallAction_0() { return cJpWithOpenCallAction_0; }
		
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0; }
		
		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_0_1; }
		
		//(=>explicitOperationCall?='('
		//    (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )?
		//')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//=>explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }
		
		//(featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_0() { return cFeatureCallArgumentsAssignment_2_1_0; }
		
		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_0_0; }
		
		//(',' featureCallArguments+=XExpression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_1_1() { return cFeatureCallArgumentsAssignment_2_1_1_1; }
		
		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitOperationCallAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//@Override
		//XFeatureCall returns XExpression:
		//    {XFeatureCall}
		//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//    feature=[types::JvmIdentifiableElement|IdOrSuper]
		//    (=>explicitOperationCall?='('
		//        (
		//            featureCallArguments+=XShortClosure
		//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		//        )?
		//    ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XFeatureCall}
		//('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		//(=>explicitOperationCall?='('
		//    (
		//        featureCallArguments+=XShortClosure
		//      | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		//    )?
		//')')?
		public Group getGroup() { return cGroup; }
		
		//{XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }
		
		//('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0; }
		
		//(',' typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
		
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_0() { return cFeatureJvmIdentifiableElementCrossReference_2_0; }
		
		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_2_0_1; }
		
		//(=>explicitOperationCall?='('
		//    (
		//        featureCallArguments+=XShortClosure
		//      | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		//    )?
		//')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//=>explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_3_0() { return cExplicitOperationCallAssignment_3_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_3_0_0; }
		
		//(
		//    featureCallArguments+=XShortClosure
		//  | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		//)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//featureCallArguments+=XShortClosure
		public Assignment getFeatureCallArgumentsAssignment_3_1_0() { return cFeatureCallArgumentsAssignment_3_1_0; }
		
		//XShortClosure
		public RuleCall getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0() { return cFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0; }
		
		//featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_0() { return cFeatureCallArgumentsAssignment_3_1_1_0; }
		
		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0; }
		
		//(',' featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_1_0() { return cCommaKeyword_3_1_1_1_0; }
		
		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_1_1() { return cFeatureCallArgumentsAssignment_3_1_1_1_1; }
		
		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class JpArrayConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpArrayConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cJpArrayConstructorCallAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cNewKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final CrossReference cTypeJvmTypeCrossReference_0_0_2_0 = (CrossReference)cTypeAssignment_0_0_2.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_0_2_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0_0_2_0.eContents().get(1);
		private final Assignment cDimensionsAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDimensionsJpArrayDimensionParserRuleCall_0_0_3_0 = (RuleCall)cDimensionsAssignment_0_0_3.eContents().get(0);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesXExpressionParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDimensionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDimensionsJpArrayDimensionParserRuleCall_3_0_0 = (RuleCall)cDimensionsAssignment_3_0.eContents().get(0);
		private final Assignment cIndexesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIndexesXExpressionParserRuleCall_3_1_0 = (RuleCall)cIndexesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cArrayLiteralAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayLiteralJpArrayLiteralParserRuleCall_4_0 = (RuleCall)cArrayLiteralAssignment_4.eContents().get(0);
		
		//// dimensions and dimension expressions (feature indexes) are not associated during parsing,
		//// the association, i.e., knowing whether a dimension expression comes after
		//// an empty dimension (which is not legal), will be retrieved by
		//// JpModelUtil.arrayDimensionIndexAssociations(JpArrayConstructorCall)
		//// based on the offset of the [ and the array dimension XEpression
		//JpArrayConstructorCall returns XExpression:
		//    =>({JpArrayConstructorCall}
		//    'new'
		//    type=[types::JvmType|QualifiedName] dimensions+=JpArrayDimension)
		//    // getting here is enough to tell it's an array constructor call
		//    (indexes+=XExpression)? ']'
		//    (=>dimensions+=JpArrayDimension (indexes+=XExpression)? ']')*
		//    (=>arrayLiteral=JpArrayLiteral)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>({JpArrayConstructorCall}
		//'new'
		//type=[types::JvmType|QualifiedName] dimensions+=JpArrayDimension)
		//// getting here is enough to tell it's an array constructor call
		//(indexes+=XExpression)? ']'
		//(=>dimensions+=JpArrayDimension (indexes+=XExpression)? ']')*
		//(=>arrayLiteral=JpArrayLiteral)?
		public Group getGroup() { return cGroup; }
		
		//=>({JpArrayConstructorCall}
		//'new'
		//type=[types::JvmType|QualifiedName] dimensions+=JpArrayDimension)
		public Group getGroup_0() { return cGroup_0; }
		
		//{JpArrayConstructorCall}
		//    'new'
		//    type=[types::JvmType|QualifiedName] dimensions+=JpArrayDimension
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{JpArrayConstructorCall}
		public Action getJpArrayConstructorCallAction_0_0_0() { return cJpArrayConstructorCallAction_0_0_0; }
		
		//'new'
		public Keyword getNewKeyword_0_0_1() { return cNewKeyword_0_0_1; }
		
		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_0_0_2() { return cTypeAssignment_0_0_2; }
		
		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0_0_2_0() { return cTypeJvmTypeCrossReference_0_0_2_0; }
		
		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_0_2_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_0_2_0_1; }
		
		//dimensions+=JpArrayDimension
		public Assignment getDimensionsAssignment_0_0_3() { return cDimensionsAssignment_0_0_3; }
		
		//JpArrayDimension
		public RuleCall getDimensionsJpArrayDimensionParserRuleCall_0_0_3_0() { return cDimensionsJpArrayDimensionParserRuleCall_0_0_3_0; }
		
		//// getting here is enough to tell it's an array constructor call
		//(indexes+=XExpression)?
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_1_0() { return cIndexesXExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//(=>dimensions+=JpArrayDimension (indexes+=XExpression)? ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//=>dimensions+=JpArrayDimension
		public Assignment getDimensionsAssignment_3_0() { return cDimensionsAssignment_3_0; }
		
		//JpArrayDimension
		public RuleCall getDimensionsJpArrayDimensionParserRuleCall_3_0_0() { return cDimensionsJpArrayDimensionParserRuleCall_3_0_0; }
		
		//(indexes+=XExpression)?
		public Assignment getIndexesAssignment_3_1() { return cIndexesAssignment_3_1; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_3_1_0() { return cIndexesXExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//(=>arrayLiteral=JpArrayLiteral)?
		public Assignment getArrayLiteralAssignment_4() { return cArrayLiteralAssignment_4; }
		
		//JpArrayLiteral
		public RuleCall getArrayLiteralJpArrayLiteralParserRuleCall_4_0() { return cArrayLiteralJpArrayLiteralParserRuleCall_4_0; }
	}
	public class JpArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsXExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// it is a subclass of XListLiteral, so that we will reuse
		//// type computation and compiler from Xbase
		//JpArrayLiteral returns XListLiteral:
		//    {JpArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{JpArrayLiteral}
		public Action getJpArrayLiteralAction_0() { return cJpArrayLiteralAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elements+=XExpression (',' elements+=XExpression )*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=XExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_0_0() { return cElementsXExpressionParserRuleCall_2_0_0; }
		
		//(',' elements+=XExpression )*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=XExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_2_1_1_0() { return cElementsXExpressionParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJpArrayLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//@Override
		//XLiteral returns XExpression:
		//    XBooleanLiteral |
		//    XNumberLiteral |
		//    XNullLiteral |
		//    XStringLiteral |
		//    JpArrayLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XBooleanLiteral |
		//XNumberLiteral |
		//XNullLiteral |
		//XStringLiteral |
		//JpArrayLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }
		
		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_1() { return cXNumberLiteralParserRuleCall_1; }
		
		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_2() { return cXNullLiteralParserRuleCall_2; }
		
		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_3() { return cXStringLiteralParserRuleCall_3; }
		
		//JpArrayLiteral
		public RuleCall getJpArrayLiteralParserRuleCall_4() { return cJpArrayLiteralParserRuleCall_4; }
	}
	public class JpArrayDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpArrayDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpArrayDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// We need an EObject instead of a simple String since we then
		//// need to find the corresponding node (and offset) with NodeModelUtils
		//// in order to associate dimensions with indexes
		//JpArrayDimension:
		//    {JpArrayDimension} '['
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpArrayDimension} '['
		public Group getGroup() { return cGroup; }
		
		//{JpArrayDimension}
		public Action getJpArrayDimensionAction_0() { return cJpArrayDimensionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
	}
	public class JpFeatureCallWithArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpFeatureCallWithArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cJpArrayAccessExpressionArrayAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIndexesJpIndexParserRuleCall_1_0_1_0 = (RuleCall)cIndexesAssignment_1_0_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIndexesJpIndexParserRuleCall_1_0_2_0 = (RuleCall)cIndexesAssignment_1_0_2.eContents().get(0);
		
		//JpFeatureCallWithArrayAccess returns XExpression:
		//    XFeatureCall (
		//        =>({JpArrayAccessExpression.array=current}
		//        indexes+=JpIndex (=>indexes+=JpIndex)*)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XFeatureCall (
		//    =>({JpArrayAccessExpression.array=current}
		//    indexes+=JpIndex (=>indexes+=JpIndex)*)
		//)?
		public Group getGroup() { return cGroup; }
		
		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_0() { return cXFeatureCallParserRuleCall_0; }
		
		//(
		//       =>({JpArrayAccessExpression.array=current}
		//       indexes+=JpIndex (=>indexes+=JpIndex)*)
		//   )?
		public Group getGroup_1() { return cGroup_1; }
		
		//{JpArrayAccessExpression.array=current}
		//        indexes+=JpIndex (=>indexes+=JpIndex)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{JpArrayAccessExpression.array=current}
		public Action getJpArrayAccessExpressionArrayAction_1_0_0() { return cJpArrayAccessExpressionArrayAction_1_0_0; }
		
		//indexes+=JpIndex
		public Assignment getIndexesAssignment_1_0_1() { return cIndexesAssignment_1_0_1; }
		
		//JpIndex
		public RuleCall getIndexesJpIndexParserRuleCall_1_0_1_0() { return cIndexesJpIndexParserRuleCall_1_0_1_0; }
		
		//(=>indexes+=JpIndex)*
		public Assignment getIndexesAssignment_1_0_2() { return cIndexesAssignment_1_0_2; }
		
		//JpIndex
		public RuleCall getIndexesJpIndexParserRuleCall_1_0_2_0() { return cIndexesJpIndexParserRuleCall_1_0_2_0; }
	}
	public class JpPrefixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpPrefixOperation");
		private final Action cJpPrefixOperationAction = (Action)rule.eContents().get(1);
		
		//// inherit XPostfixOperation, reuse it's code
		//JpPrefixOperation returns XPostfixOperation:
		//    {JpPrefixOperation}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpPrefixOperation}
		public Action getJpPrefixOperationAction() { return cJpPrefixOperationAction; }
	}
	public class JpIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpIndexAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexesJpRangeParserRuleCall_2_0 = (RuleCall)cIndexesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIndexesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIndexesJpRangeParserRuleCall_3_1_0 = (RuleCall)cIndexesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JpIndex returns XExpression:
		//    {JpIndex}
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpIndex}
		//'[' indexes+=JpRange (',' indexes+=JpRange)* ']'
		public Group getGroup() { return cGroup; }
		
		//{JpIndex}
		public Action getJpIndexAction_0() { return cJpIndexAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_2() { return cIndexesAssignment_2; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_2_0() { return cIndexesJpRangeParserRuleCall_2_0; }
		
		//(',' indexes+=JpRange)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_3_1() { return cIndexesAssignment_3_1; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_3_1_0() { return cIndexesJpRangeParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class JpRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cJpPrefixOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final Keyword cFeatureJvmIdentifiableElementColonKeyword_0_1_0_1 = (Keyword)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXAdditiveExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJpPrefixOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final Keyword cFeatureJvmIdentifiableElementColonKeyword_1_1_0_1 = (Keyword)cFeatureJvmIdentifiableElementCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cXAdditiveExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Action cXPostfixOperationOperandAction_2_1_0_0_0 = (Action)cGroup_2_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1_0_0_1 = (Assignment)cGroup_2_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_1_0_0_1_0 = (CrossReference)cFeatureAssignment_2_1_0_0_1.eContents().get(0);
		private final Keyword cFeatureJvmIdentifiableElementColonKeyword_2_1_0_0_1_0_1 = (Keyword)cFeatureJvmIdentifiableElementCrossReference_2_1_0_0_1_0.eContents().get(1);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cGroup_2_1_1.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_2_1_1_0_0 = (Action)cGroup_2_1_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1_1_0_1 = (Assignment)cGroup_2_1_1_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_1_0 = (CrossReference)cFeatureAssignment_2_1_1_0_1.eContents().get(0);
		private final Keyword cFeatureJvmIdentifiableElementColonKeyword_2_1_1_0_1_0_1 = (Keyword)cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_2_1_1_0_2_0 = (RuleCall)cRightOperandAssignment_2_1_1_0_2.eContents().get(0);
		
		//JpRange returns XExpression:
		//    {JpPrefixOperation} feature=[types::JvmIdentifiableElement|':'] operand=XAdditiveExpression
		//    | {JpPrefixOperation} feature=[types::JvmIdentifiableElement|':']
		//    | XAdditiveExpression (
		//        =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
		//       |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpPrefixOperation} feature=[types::JvmIdentifiableElement|':'] operand=XAdditiveExpression
		//| {JpPrefixOperation} feature=[types::JvmIdentifiableElement|':']
		//| XAdditiveExpression (
		//    =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
		//   |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{JpPrefixOperation} feature=[types::JvmIdentifiableElement|':'] operand=XAdditiveExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{JpPrefixOperation}
		public Action getJpPrefixOperationAction_0_0() { return cJpPrefixOperationAction_0_0; }
		
		//feature=[types::JvmIdentifiableElement|':']
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//[types::JvmIdentifiableElement|':']
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }
		
		//':'
		public Keyword getFeatureJvmIdentifiableElementColonKeyword_0_1_0_1() { return cFeatureJvmIdentifiableElementColonKeyword_0_1_0_1; }
		
		//operand=XAdditiveExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//XAdditiveExpression
		public RuleCall getOperandXAdditiveExpressionParserRuleCall_0_2_0() { return cOperandXAdditiveExpressionParserRuleCall_0_2_0; }
		
		//{JpPrefixOperation} feature=[types::JvmIdentifiableElement|':']
		public Group getGroup_1() { return cGroup_1; }
		
		//{JpPrefixOperation}
		public Action getJpPrefixOperationAction_1_0() { return cJpPrefixOperationAction_1_0; }
		
		//feature=[types::JvmIdentifiableElement|':']
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }
		
		//[types::JvmIdentifiableElement|':']
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_0; }
		
		//':'
		public Keyword getFeatureJvmIdentifiableElementColonKeyword_1_1_0_1() { return cFeatureJvmIdentifiableElementColonKeyword_1_1_0_1; }
		
		//XAdditiveExpression (
		//       =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
		//      |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
		//   )
		public Group getGroup_2() { return cGroup_2; }
		
		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_2_0() { return cXAdditiveExpressionParserRuleCall_2_0; }
		
		//(
		//       =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
		//      |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
		//   )
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//=>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//{XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':']
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }
		
		//{XPostfixOperation.operand=current}
		public Action getXPostfixOperationOperandAction_2_1_0_0_0() { return cXPostfixOperationOperandAction_2_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|':']
		public Assignment getFeatureAssignment_2_1_0_0_1() { return cFeatureAssignment_2_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|':']
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_2_1_0_0_1_0; }
		
		//':'
		public Keyword getFeatureJvmIdentifiableElementColonKeyword_2_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementColonKeyword_2_1_0_0_1_0_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_2_1_1_0_0() { return cXBinaryOperationLeftOperandAction_2_1_1_0_0; }
		
		//feature=[types::JvmIdentifiableElement|':']
		public Assignment getFeatureAssignment_2_1_1_0_1() { return cFeatureAssignment_2_1_1_0_1; }
		
		//[types::JvmIdentifiableElement|':']
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_1_1_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_1_0; }
		
		//':'
		public Keyword getFeatureJvmIdentifiableElementColonKeyword_2_1_1_0_1_0_1() { return cFeatureJvmIdentifiableElementColonKeyword_2_1_1_0_1_0_1; }
		
		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_2_1_1_0_2() { return cRightOperandAssignment_2_1_1_0_2; }
		
		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_2_1_1_0_2_0() { return cRightOperandXAdditiveExpressionParserRuleCall_2_1_1_0_2_0; }
	}
	public class JpLetVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpLetVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cJpLetVarDeclarationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLetKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_0_0_2_0 = (RuleCall)cNameAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOtherAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOtherJpAdditionalVariableDeclarationParserRuleCall_1_1_0 = (RuleCall)cOtherAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightXExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//JpLetVarDeclaration returns XVariableDeclaration:
		//    =>({JpLetVarDeclaration}
		//    'let' name=ValidID) (',' other+=JpAdditionalVariableDeclaration)* '=' right=XExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>({JpLetVarDeclaration}
		//'let' name=ValidID) (',' other+=JpAdditionalVariableDeclaration)* '=' right=XExpression
		public Group getGroup() { return cGroup; }
		
		//=>({JpLetVarDeclaration}
		//'let' name=ValidID)
		public Group getGroup_0() { return cGroup_0; }
		
		//{JpLetVarDeclaration}
		//    'let' name=ValidID
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{JpLetVarDeclaration}
		public Action getJpLetVarDeclarationAction_0_0_0() { return cJpLetVarDeclarationAction_0_0_0; }
		
		//'let'
		public Keyword getLetKeyword_0_0_1() { return cLetKeyword_0_0_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_0_0_2() { return cNameAssignment_0_0_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_2_0() { return cNameValidIDParserRuleCall_0_0_2_0; }
		
		//(',' other+=JpAdditionalVariableDeclaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//other+=JpAdditionalVariableDeclaration
		public Assignment getOtherAssignment_1_1() { return cOtherAssignment_1_1; }
		
		//JpAdditionalVariableDeclaration
		public RuleCall getOtherJpAdditionalVariableDeclarationParserRuleCall_1_1_0() { return cOtherJpAdditionalVariableDeclarationParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//right=XExpression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_0() { return cRightXExpressionParserRuleCall_3_0; }
	}
	public class JpAdditionalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpAdditionalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpAdditionalVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//JpAdditionalVariableDeclaration returns XVariableDeclaration:
		//    {JpAdditionalVariableDeclaration}
		//    name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpAdditionalVariableDeclaration}
		//name=ValidID
		public Group getGroup() { return cGroup; }
		
		//{JpAdditionalVariableDeclaration}
		public Action getJpAdditionalVariableDeclarationAction_0() { return cJpAdditionalVariableDeclarationAction_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class JpWithOpenAsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpWithOpenAs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJpWithOpenAsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpenJpWithOpenAsCallParserRuleCall_2_0 = (RuleCall)cOpenAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cWithExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWithExpressionJpStatementOrBlockParserRuleCall_5_0 = (RuleCall)cWithExpressionAssignment_5.eContents().get(0);
		
		//JpWithOpenAs returns XExpression:
		//    {JpWithOpenAs}
		//    'with' open=JpWithOpenAsCall 'as' name=ValidID withExpression=JpStatementOrBlock
		////    (=>'else' else=JpStatementOrBlock)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpWithOpenAs}
		//'with' open=JpWithOpenAsCall 'as' name=ValidID withExpression=JpStatementOrBlock
		public Group getGroup() { return cGroup; }
		
		//{JpWithOpenAs}
		public Action getJpWithOpenAsAction_0() { return cJpWithOpenAsAction_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//open=JpWithOpenAsCall
		public Assignment getOpenAssignment_2() { return cOpenAssignment_2; }
		
		//JpWithOpenAsCall
		public RuleCall getOpenJpWithOpenAsCallParserRuleCall_2_0() { return cOpenJpWithOpenAsCallParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }
		
		//withExpression=JpStatementOrBlock
		public Assignment getWithExpressionAssignment_5() { return cWithExpressionAssignment_5; }
		
		//JpStatementOrBlock
		public RuleCall getWithExpressionJpStatementOrBlockParserRuleCall_5_0() { return cWithExpressionJpStatementOrBlockParserRuleCall_5_0; }
	}
	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXBitwiseInclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXBitwiseInclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//// add bitwise operators with their precedence
		//@Override
		//XAndExpression returns XExpression:
		//    XBitwiseInclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XBitwiseInclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//XBitwiseInclusiveOrExpression
		public RuleCall getXBitwiseInclusiveOrExpressionParserRuleCall_0() { return cXBitwiseInclusiveOrExpressionParserRuleCall_0; }
		
		//(=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpAnd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpAnd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpAnd
		public RuleCall getFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpAndParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=XBitwiseInclusiveOrExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//XBitwiseInclusiveOrExpression
		public RuleCall getRightOperandXBitwiseInclusiveOrExpressionParserRuleCall_1_1_0() { return cRightOperandXBitwiseInclusiveOrExpressionParserRuleCall_1_1_0; }
	}
	public class XBitwiseInclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XBitwiseInclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXBitwiseExclusiveOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpInclusiveOrParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXBitwiseExclusiveOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XBitwiseInclusiveOrExpression returns XExpression:
		//    XBitwiseExclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XBitwiseExclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//XBitwiseExclusiveOrExpression
		public RuleCall getXBitwiseExclusiveOrExpressionParserRuleCall_0() { return cXBitwiseExclusiveOrExpressionParserRuleCall_0; }
		
		//(=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpInclusiveOr]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpInclusiveOr]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpInclusiveOr
		public RuleCall getFeatureJvmIdentifiableElementOpInclusiveOrParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpInclusiveOrParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=XBitwiseExclusiveOrExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//XBitwiseExclusiveOrExpression
		public RuleCall getRightOperandXBitwiseExclusiveOrExpressionParserRuleCall_1_1_0() { return cRightOperandXBitwiseExclusiveOrExpressionParserRuleCall_1_1_0; }
	}
	public class OpInclusiveOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.OpInclusiveOr");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpInclusiveOr:
		//    '|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class XBitwiseExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XBitwiseExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpExclusiveOrParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXBitwiseAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XBitwiseExclusiveOrExpression returns XExpression:
		//    XBitwiseAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XBitwiseAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//XBitwiseAndExpression
		public RuleCall getXBitwiseAndExpressionParserRuleCall_0() { return cXBitwiseAndExpressionParserRuleCall_0; }
		
		//(=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpExclusiveOr]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpExclusiveOr]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpExclusiveOr
		public RuleCall getFeatureJvmIdentifiableElementOpExclusiveOrParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpExclusiveOrParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=XBitwiseAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//XBitwiseAndExpression
		public RuleCall getRightOperandXBitwiseAndExpressionParserRuleCall_1_1_0() { return cRightOperandXBitwiseAndExpressionParserRuleCall_1_1_0; }
	}
	public class OpExclusiveOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.OpExclusiveOr");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//OpExclusiveOr:
		//    '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}
	public class XBitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XBitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpBitwiseAndParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XBitwiseAndExpression returns XExpression:
		//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]) rightOperand=XEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]) rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }
		
		//(=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]) rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpBitwiseAnd]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpBitwiseAnd]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpBitwiseAnd
		public RuleCall getFeatureJvmIdentifiableElementOpBitwiseAndParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpBitwiseAndParserRuleCall_1_0_0_1_0_1; }
		
		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class OpBitwiseAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.OpBitwiseAnd");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpBitwiseAnd:
		//    '&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// add bitwise not ~
		//@Override
		//OpUnary:
		//    "!" | "-" | "+" | "~";
		@Override public ParserRule getRule() { return rule; }
		
		//"!" | "-" | "+" | "~"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//"~"
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
	}
	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCircumflexAccentEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLessThanSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cEqualsSignKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//@Override
		//OpMultiAssign:
		//    '+=' | '-=' | '*=' | '/=' | '%=' |
		//    '&=' | '|=' | '^=' | // added in Jbase
		//    '<' '<' '=' |
		//    '>' '>'? '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'+=' | '-=' | '*=' | '/=' | '%=' |
		//'&=' | '|=' | '^=' | // added in Jbase
		//'<' '<' '=' |
		//'>' '>'? '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_5() { return cAmpersandEqualsSignKeyword_5; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_6() { return cVerticalLineEqualsSignKeyword_6; }
		
		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_7() { return cCircumflexAccentEqualsSignKeyword_7; }
		
		//// added in Jbase
		//   '<' '<' '='
		public Group getGroup_8() { return cGroup_8; }
		
		//// added in Jbase
		//   '<'
		public Keyword getLessThanSignKeyword_8_0() { return cLessThanSignKeyword_8_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_8_1() { return cLessThanSignKeyword_8_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_2() { return cEqualsSignKeyword_8_2; }
		
		//'>' '>'? '>='
		public Group getGroup_9() { return cGroup_9; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9_0() { return cGreaterThanSignKeyword_9_0; }
		
		//'>'?
		public Keyword getGreaterThanSignKeyword_9_1() { return cGreaterThanSignKeyword_9_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_9_2() { return cGreaterThanSignEqualsSignKeyword_9_2; }
	}
	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJpArrayConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXConstructorCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJpFeatureCallWithArrayAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///**** Override x.base definition ****/
		//@Override
		//XPrimaryExpression returns XExpression:
		//    JpArrayConstructorCall |
		//    XConstructorCall |
		//    JpFeatureCallWithArrayAccess |
		//    XLiteral |
		//    XParenthesizedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JpArrayConstructorCall |
		//XConstructorCall |
		//JpFeatureCallWithArrayAccess |
		//XLiteral |
		//XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JpArrayConstructorCall
		public RuleCall getJpArrayConstructorCallParserRuleCall_0() { return cJpArrayConstructorCallParserRuleCall_0; }
		
		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_1() { return cXConstructorCallParserRuleCall_1; }
		
		//JpFeatureCallWithArrayAccess
		public RuleCall getJpFeatureCallWithArrayAccessParserRuleCall_2() { return cJpFeatureCallWithArrayAccessParserRuleCall_2; }
		
		//XLiteral
		public RuleCall getXLiteralParserRuleCall_3() { return cXLiteralParserRuleCall_3; }
		
		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_4() { return cXParenthesizedExpressionParserRuleCall_4; }
	}
	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsJpStatementOrBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//@Override
		//XBlockExpression returns XExpression:
		//    {XBlockExpression} '{'
		//        (expressions+=JpStatementOrBlock ';'?)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XBlockExpression} '{'
		//    (expressions+=JpStatementOrBlock ';'?)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(expressions+=JpStatementOrBlock ';'?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=JpStatementOrBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//JpStatementOrBlock
		public RuleCall getExpressionsJpStatementOrBlockParserRuleCall_2_0_0() { return cExpressionsJpStatementOrBlockParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class XExpressionOrVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XExpressionOrVarDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJpLetVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//@Override
		//XExpressionOrVarDeclaration returns XExpression:
		//    XVariableDeclaration | JpLetVarDeclaration | XExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XVariableDeclaration | JpLetVarDeclaration | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_0() { return cXVariableDeclarationParserRuleCall_0; }
		
		//JpLetVarDeclaration
		public RuleCall getJpLetVarDeclarationParserRuleCall_1() { return cJpLetVarDeclarationParserRuleCall_1; }
		
		//XExpression
		public RuleCall getXExpressionParserRuleCall_2() { return cXExpressionParserRuleCall_2; }
	}
	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenJpStatementOrBlockParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseJpStatementOrBlockParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//@Override
		//XIfExpression returns XExpression:
		//    {XIfExpression}
		//    'if' '(' if=XExpression ')' then=JpStatementOrBlock
		//    (=>'else' else=JpStatementOrBlock)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XIfExpression}
		//'if' '(' if=XExpression ')' then=JpStatementOrBlock
		//(=>'else' else=JpStatementOrBlock)?
		public Group getGroup() { return cGroup; }
		
		//{XIfExpression}
		public Action getXIfExpressionAction_0() { return cXIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }
		
		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//then=JpStatementOrBlock
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }
		
		//JpStatementOrBlock
		public RuleCall getThenJpStatementOrBlockParserRuleCall_5_0() { return cThenJpStatementOrBlockParserRuleCall_5_0; }
		
		//(=>'else' else=JpStatementOrBlock)?
		public Group getGroup_6() { return cGroup_6; }
		
		//=>'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//else=JpStatementOrBlock
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }
		
		//JpStatementOrBlock
		public RuleCall getElseJpStatementOrBlockParserRuleCall_6_1_0() { return cElseJpStatementOrBlockParserRuleCall_6_1_0; }
	}
	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_0_4 = (Alternatives)cGroup_0_0.eContents().get(4);
		private final Keyword cColonKeyword_0_0_4_0 = (Keyword)cAlternatives_0_0_4.eContents().get(0);
		private final Keyword cInKeyword_0_0_4_1 = (Keyword)cAlternatives_0_0_4.eContents().get(1);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionJpStatementOrBlockParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		
		//@Override
		//XForLoopExpression returns XExpression:
		//    =>({XForLoopExpression}
		//    'for' '(' declaredParam=JvmFormalParameter  (':'|'in')) forExpression=XExpression ')'
		//        eachExpression=JpStatementOrBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>({XForLoopExpression}
		//'for' '(' declaredParam=JvmFormalParameter  (':'|'in')) forExpression=XExpression ')'
		//    eachExpression=JpStatementOrBlock
		public Group getGroup() { return cGroup; }
		
		//=>({XForLoopExpression}
		//'for' '(' declaredParam=JvmFormalParameter  (':'|'in'))
		public Group getGroup_0() { return cGroup_0; }
		
		//{XForLoopExpression}
		//    'for' '(' declaredParam=JvmFormalParameter  (':'|'in')
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{XForLoopExpression}
		public Action getXForLoopExpressionAction_0_0_0() { return cXForLoopExpressionAction_0_0_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }
		
		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }
		
		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0; }
		
		//(':'|'in')
		public Alternatives getAlternatives_0_0_4() { return cAlternatives_0_0_4; }
		
		//':'
		public Keyword getColonKeyword_0_0_4_0() { return cColonKeyword_0_0_4_0; }
		
		//'in'
		public Keyword getInKeyword_0_0_4_1() { return cInKeyword_0_0_4_1; }
		
		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }
		
		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_0() { return cForExpressionXExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//eachExpression=JpStatementOrBlock
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }
		
		//JpStatementOrBlock
		public RuleCall getEachExpressionJpStatementOrBlockParserRuleCall_3_0() { return cEachExpressionJpStatementOrBlockParserRuleCall_3_0; }
	}
	public class XPostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XPostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMemberFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXPostfixOperationOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cJpArrayAccessExpressionArrayAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cIndexesAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cIndexesXExpressionParserRuleCall_1_1_0_2_0 = (RuleCall)cIndexesAssignment_1_1_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Group cGroup_1_1_0_4 = (Group)cGroup_1_1_0.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_4_0 = (Keyword)cGroup_1_1_0_4.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1_0_4_1 = (Assignment)cGroup_1_1_0_4.eContents().get(1);
		private final RuleCall cIndexesXExpressionParserRuleCall_1_1_0_4_1_0 = (RuleCall)cIndexesAssignment_1_1_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_4_2 = (Keyword)cGroup_1_1_0_4.eContents().get(2);
		
		//@Override
		//XPostfixOperation returns XExpression:
		//    XMemberFeatureCall
		//    (
		//        =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
		//        |=>({JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XMemberFeatureCall
		//(
		//    =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
		//    |=>({JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
		//)?
		public Group getGroup() { return cGroup; }
		
		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_0() { return cXMemberFeatureCallParserRuleCall_0; }
		
		//(
		//    =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
		//    |=>({JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XPostfixOperation.operand=current}
		public Action getXPostfixOperationOperandAction_1_0_0_0() { return cXPostfixOperationOperandAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpPostfix]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpPostfix]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//OpPostfix
		public RuleCall getFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_0_1_0_1; }
		
		//=>({JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{JpArrayAccessExpression.array=current}
		public Action getJpArrayAccessExpressionArrayAction_1_1_0_0() { return cJpArrayAccessExpressionArrayAction_1_1_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0_1() { return cLeftSquareBracketKeyword_1_1_0_1; }
		
		//indexes+=XExpression
		public Assignment getIndexesAssignment_1_1_0_2() { return cIndexesAssignment_1_1_0_2; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_1_1_0_2_0() { return cIndexesXExpressionParserRuleCall_1_1_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_0_3() { return cRightSquareBracketKeyword_1_1_0_3; }
		
		//(=>'[' indexes+=XExpression ']')*
		public Group getGroup_1_1_0_4() { return cGroup_1_1_0_4; }
		
		//=>'['
		public Keyword getLeftSquareBracketKeyword_1_1_0_4_0() { return cLeftSquareBracketKeyword_1_1_0_4_0; }
		
		//indexes+=XExpression
		public Assignment getIndexesAssignment_1_1_0_4_1() { return cIndexesAssignment_1_1_0_4_1; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_1_1_0_4_1_0() { return cIndexesXExpressionParserRuleCall_1_1_0_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_0_4_2() { return cRightSquareBracketKeyword_1_1_0_4_2; }
	}
	public class XBasicForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XBasicForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBasicForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitExpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cInitExpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitExpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cInitExpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cUpdateExpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cUpdateExpressionsXExpressionParserRuleCall_7_0_0 = (RuleCall)cUpdateExpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cUpdateExpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cUpdateExpressionsXExpressionParserRuleCall_7_1_1_0 = (RuleCall)cUpdateExpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEachExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEachExpressionJpStatementOrBlockParserRuleCall_9_0 = (RuleCall)cEachExpressionAssignment_9.eContents().get(0);
		
		//@Override
		//XBasicForLoopExpression returns XExpression:
		//    {XBasicForLoopExpression}
		//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
		//        expression=XExpression? ';'
		//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
		//        eachExpression=JpStatementOrBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XBasicForLoopExpression}
		//'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
		//    expression=XExpression? ';'
		//    (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
		//    eachExpression=JpStatementOrBlock
		public Group getGroup() { return cGroup; }
		
		//{XBasicForLoopExpression}
		public Action getXBasicForLoopExpressionAction_0() { return cXBasicForLoopExpressionAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//initExpressions+=XExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_0() { return cInitExpressionsAssignment_3_0; }
		
		//XExpressionOrVarDeclaration
		public RuleCall getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0() { return cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0; }
		
		//(',' initExpressions+=XExpressionOrVarDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//initExpressions+=XExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_1_1() { return cInitExpressionsAssignment_3_1_1; }
		
		//XExpressionOrVarDeclaration
		public RuleCall getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0() { return cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//expression=XExpression?
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_5_0() { return cExpressionXExpressionParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//(updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//updateExpressions+=XExpression
		public Assignment getUpdateExpressionsAssignment_7_0() { return cUpdateExpressionsAssignment_7_0; }
		
		//XExpression
		public RuleCall getUpdateExpressionsXExpressionParserRuleCall_7_0_0() { return cUpdateExpressionsXExpressionParserRuleCall_7_0_0; }
		
		//(',' updateExpressions+=XExpression)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//updateExpressions+=XExpression
		public Assignment getUpdateExpressionsAssignment_7_1_1() { return cUpdateExpressionsAssignment_7_1_1; }
		
		//XExpression
		public RuleCall getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0() { return cUpdateExpressionsXExpressionParserRuleCall_7_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//eachExpression=JpStatementOrBlock
		public Assignment getEachExpressionAssignment_9() { return cEachExpressionAssignment_9; }
		
		//JpStatementOrBlock
		public RuleCall getEachExpressionJpStatementOrBlockParserRuleCall_9_0() { return cEachExpressionJpStatementOrBlockParserRuleCall_9_0; }
	}
	public class XImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0_0 = (Keyword)cStaticAssignment_1_0_0.eContents().get(0);
		private final Assignment cExtensionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExtensionExtensionKeyword_1_0_1_0 = (Keyword)cExtensionAssignment_1_0_1.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0 = (CrossReference)cImportedTypeAssignment_1_0_2.eContents().get(0);
		private final RuleCall cImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_2_0_1 = (RuleCall)cImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_3 = (Alternatives)cGroup_1_0.eContents().get(3);
		private final Assignment cWildcardAssignment_1_0_3_0 = (Assignment)cAlternatives_1_0_3.eContents().get(0);
		private final Keyword cWildcardAsteriskKeyword_1_0_3_0_0 = (Keyword)cWildcardAssignment_1_0_3_0.eContents().get(0);
		private final Assignment cMemberNameAssignment_1_0_3_1 = (Assignment)cAlternatives_1_0_3.eContents().get(1);
		private final RuleCall cMemberNameValidIDParserRuleCall_1_0_3_1_0 = (RuleCall)cMemberNameAssignment_1_0_3_1.eContents().get(0);
		private final Assignment cImportedTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cImportedTypeJvmDeclaredTypeCrossReference_1_1_0 = (CrossReference)cImportedTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cImportedTypeJvmDeclaredTypeCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cJpImportDeclarationAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_2_1_0 = (RuleCall)cImportedNamespaceAssignment_1_2_1.eContents().get(0);
		private final Keyword cAsKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cAliasAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cAliasValidIDParserRuleCall_1_2_3_0 = (RuleCall)cAliasAssignment_1_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//@Override
		//XImportDeclaration returns xtype::XImportDeclaration:
		//    'import' (
		//        (static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		//        | importedType=[types::JvmDeclaredType|QualifiedName]
		//        | {JpImportDeclaration} importedNamespace=QualifiedName 'as' alias=ValidID) ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (
		//    (static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		//    | importedType=[types::JvmDeclaredType|QualifiedName]
		//    | {JpImportDeclaration} importedNamespace=QualifiedName 'as' alias=ValidID) ';'?
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(
		//       (static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		//       | importedType=[types::JvmDeclaredType|QualifiedName]
		//       | {JpImportDeclaration} importedNamespace=QualifiedName 'as' alias=ValidID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//static?='static'
		public Assignment getStaticAssignment_1_0_0() { return cStaticAssignment_1_0_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0_0() { return cStaticStaticKeyword_1_0_0_0; }
		
		//extension?='extension'?
		public Assignment getExtensionAssignment_1_0_1() { return cExtensionAssignment_1_0_1; }
		
		//'extension'
		public Keyword getExtensionExtensionKeyword_1_0_1_0() { return cExtensionExtensionKeyword_1_0_1_0; }
		
		//importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport]
		public Assignment getImportedTypeAssignment_1_0_2() { return cImportedTypeAssignment_1_0_2; }
		
		//[types::JvmDeclaredType|QualifiedNameInStaticImport]
		public CrossReference getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0() { return cImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0; }
		
		//QualifiedNameInStaticImport
		public RuleCall getImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_2_0_1() { return cImportedTypeJvmDeclaredTypeQualifiedNameInStaticImportParserRuleCall_1_0_2_0_1; }
		
		//(wildcard?='*' | memberName=ValidID)
		public Alternatives getAlternatives_1_0_3() { return cAlternatives_1_0_3; }
		
		//wildcard?='*'
		public Assignment getWildcardAssignment_1_0_3_0() { return cWildcardAssignment_1_0_3_0; }
		
		//'*'
		public Keyword getWildcardAsteriskKeyword_1_0_3_0_0() { return cWildcardAsteriskKeyword_1_0_3_0_0; }
		
		//memberName=ValidID
		public Assignment getMemberNameAssignment_1_0_3_1() { return cMemberNameAssignment_1_0_3_1; }
		
		//ValidID
		public RuleCall getMemberNameValidIDParserRuleCall_1_0_3_1_0() { return cMemberNameValidIDParserRuleCall_1_0_3_1_0; }
		
		//importedType=[types::JvmDeclaredType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_1() { return cImportedTypeAssignment_1_1; }
		
		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getImportedTypeJvmDeclaredTypeCrossReference_1_1_0() { return cImportedTypeJvmDeclaredTypeCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1() { return cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_1_0_1; }
		
		//{JpImportDeclaration} importedNamespace=QualifiedName 'as' alias=ValidID
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{JpImportDeclaration}
		public Action getJpImportDeclarationAction_1_2_0() { return cJpImportDeclarationAction_1_2_0; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1_2_1() { return cImportedNamespaceAssignment_1_2_1; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_2_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_2_1_0; }
		
		//'as'
		public Keyword getAsKeyword_1_2_2() { return cAsKeyword_1_2_2; }
		
		//alias=ValidID
		public Assignment getAliasAssignment_1_2_3() { return cAliasAssignment_1_2_3; }
		
		//ValidID
		public RuleCall getAliasValidIDParserRuleCall_1_2_3_0() { return cAliasValidIDParserRuleCall_1_2_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class JpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.JpAssignment");
		private final Action cJpAssignmentAction = (Action)rule.eContents().get(1);
		
		//JpAssignment returns XAssignment:
		//    {JpAssignment}
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{JpAssignment}
		public Action getJpAssignmentAction() { return cJpAssignmentAction; }
	}
	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Action cJpAssignmentAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_0_0_1_0 = (CrossReference)cFeatureAssignment_0_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_0_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_0_0_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_0_0_2 = (Keyword)cGroup_0_0_0.eContents().get(2);
		private final Assignment cIndexesAssignment_0_0_0_3 = (Assignment)cGroup_0_0_0.eContents().get(3);
		private final RuleCall cIndexesJpRangeParserRuleCall_0_0_0_3_0 = (RuleCall)cIndexesAssignment_0_0_0_3.eContents().get(0);
		private final Group cGroup_0_0_0_4 = (Group)cGroup_0_0_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_0_0_4_0 = (Keyword)cGroup_0_0_0_4.eContents().get(0);
		private final Assignment cIndexesAssignment_0_0_0_4_1 = (Assignment)cGroup_0_0_0_4.eContents().get(1);
		private final RuleCall cIndexesJpRangeParserRuleCall_0_0_0_4_1_0 = (RuleCall)cIndexesAssignment_0_0_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_0_5 = (Keyword)cGroup_0_0_0.eContents().get(5);
		private final Group cGroup_0_0_0_6 = (Group)cGroup_0_0_0.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_0_0_0_6_0 = (Keyword)cGroup_0_0_0_6.eContents().get(0);
		private final Assignment cIndexesAssignment_0_0_0_6_1 = (Assignment)cGroup_0_0_0_6.eContents().get(1);
		private final RuleCall cIndexesXExpressionParserRuleCall_0_0_0_6_1_0 = (RuleCall)cIndexesAssignment_0_0_0_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_0_6_2 = (Keyword)cGroup_0_0_0_6.eContents().get(2);
		private final RuleCall cOpSingleAssignParserRuleCall_0_0_0_7 = (RuleCall)cGroup_0_0_0.eContents().get(7);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXAssignmentAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_2 = (RuleCall)cGroup_1_0_0.eContents().get(2);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cXOrExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_0_0_0 = (Group)cGroup_2_1_0_0.eContents().get(0);
		private final Action cJpConditionalExpressionIfAction_2_1_0_0_0_0 = (Action)cGroup_2_1_0_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_1_0_0_0_1 = (Keyword)cGroup_2_1_0_0_0.eContents().get(1);
		private final Assignment cThenAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cThenXExpressionParserRuleCall_2_1_0_1_0 = (RuleCall)cThenAssignment_2_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Assignment cElseAssignment_2_1_0_3 = (Assignment)cGroup_2_1_0.eContents().get(3);
		private final RuleCall cElseXExpressionParserRuleCall_2_1_0_3_0 = (RuleCall)cElseAssignment_2_1_0_3.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cGroup_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_0_0 = (Group)cGroup_2_1_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_2_1_1_0_0_0 = (Action)cGroup_2_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_2_1_1_0_0_1 = (Assignment)cGroup_2_1_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_0_1_0 = (CrossReference)cFeatureAssignment_2_1_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_2_1_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cRightOperandXAssignmentParserRuleCall_2_1_1_1_0 = (RuleCall)cRightOperandAssignment_2_1_1_1.eContents().get(0);
		
		//@Override
		//XAssignment returns XExpression :
		//    =>({JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign) value=XAssignment |
		//    =>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        OpSingleAssign) value=XAssignment |
		//    XOrExpression (
		//        =>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
		//        |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>({JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//    OpSingleAssign) value=XAssignment |
		//=>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    OpSingleAssign) value=XAssignment |
		//XOrExpression (
		//    =>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
		//    |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=>({JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//    OpSingleAssign) value=XAssignment
		public Group getGroup_0() { return cGroup_0; }
		
		//=>({JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//    OpSingleAssign)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//{JpAssignment}
		public Action getJpAssignmentAction_0_0_0_0() { return cJpAssignmentAction_0_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_0_0_0_1() { return cFeatureAssignment_0_0_0_1; }
		
		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_0_0_1_0; }
		
		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_0_0_0_1_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_0_0_0_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_0_2() { return cLeftSquareBracketKeyword_0_0_0_2; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_0_0_0_3() { return cIndexesAssignment_0_0_0_3; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_0_0_0_3_0() { return cIndexesJpRangeParserRuleCall_0_0_0_3_0; }
		
		//(',' indexes+=JpRange)*
		public Group getGroup_0_0_0_4() { return cGroup_0_0_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_0_0_4_0() { return cCommaKeyword_0_0_0_4_0; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_0_0_0_4_1() { return cIndexesAssignment_0_0_0_4_1; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_0_0_0_4_1_0() { return cIndexesJpRangeParserRuleCall_0_0_0_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_0_5() { return cRightSquareBracketKeyword_0_0_0_5; }
		
		//('[' indexes+=XExpression ']')*
		public Group getGroup_0_0_0_6() { return cGroup_0_0_0_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_0_6_0() { return cLeftSquareBracketKeyword_0_0_0_6_0; }
		
		//indexes+=XExpression
		public Assignment getIndexesAssignment_0_0_0_6_1() { return cIndexesAssignment_0_0_0_6_1; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_0_0_0_6_1_0() { return cIndexesXExpressionParserRuleCall_0_0_0_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_0_6_2() { return cRightSquareBracketKeyword_0_0_0_6_2; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_0_0_7() { return cOpSingleAssignParserRuleCall_0_0_0_7; }
		
		//value=XAssignment
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_0_1_0() { return cValueXAssignmentParserRuleCall_0_1_0; }
		
		//=>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    OpSingleAssign) value=XAssignment
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    OpSingleAssign)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        OpSingleAssign
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XAssignment}
		public Action getXAssignmentAction_1_0_0_0() { return cXAssignmentAction_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }
		
		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_1_0_1; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_2() { return cOpSingleAssignParserRuleCall_1_0_0_2; }
		
		//value=XAssignment
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_1_0() { return cValueXAssignmentParserRuleCall_1_1_0; }
		
		//XOrExpression (
		//    =>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
		//    |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_2_0() { return cXOrExpressionParserRuleCall_2_0; }
		
		//(
		//       =>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
		//       |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		//   )?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//=>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//=>({JpConditionalExpression.if=current} '?')
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }
		
		//{JpConditionalExpression.if=current} '?'
		public Group getGroup_2_1_0_0_0() { return cGroup_2_1_0_0_0; }
		
		//{JpConditionalExpression.if=current}
		public Action getJpConditionalExpressionIfAction_2_1_0_0_0_0() { return cJpConditionalExpressionIfAction_2_1_0_0_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_1_0_0_0_1() { return cQuestionMarkKeyword_2_1_0_0_0_1; }
		
		//then=XExpression
		public Assignment getThenAssignment_2_1_0_1() { return cThenAssignment_2_1_0_1; }
		
		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_2_1_0_1_0() { return cThenXExpressionParserRuleCall_2_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_1_0_2() { return cColonKeyword_2_1_0_2; }
		
		//else=XExpression
		public Assignment getElseAssignment_2_1_0_3() { return cElseAssignment_2_1_0_3; }
		
		//XExpression
		public RuleCall getElseXExpressionParserRuleCall_2_1_0_3_0() { return cElseXExpressionParserRuleCall_2_1_0_3_0; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }
		
		//{XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Group getGroup_2_1_1_0_0() { return cGroup_2_1_1_0_0; }
		
		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_2_1_1_0_0_0() { return cXBinaryOperationLeftOperandAction_2_1_1_0_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpMultiAssign]
		public Assignment getFeatureAssignment_2_1_1_0_0_1() { return cFeatureAssignment_2_1_1_0_0_1; }
		
		//[types::JvmIdentifiableElement|OpMultiAssign]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_2_1_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_2_1_1_0_0_1_0; }
		
		//OpMultiAssign
		public RuleCall getFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_2_1_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpMultiAssignParserRuleCall_2_1_1_0_0_1_0_1; }
		
		//rightOperand=XAssignment
		public Assignment getRightOperandAssignment_2_1_1_1() { return cRightOperandAssignment_2_1_1_1; }
		
		//XAssignment
		public RuleCall getRightOperandXAssignmentParserRuleCall_2_1_1_1_0() { return cRightOperandXAssignmentParserRuleCall_2_1_1_1_0; }
	}
	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cJpAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0 = (CrossReference)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_0_3 = (Keyword)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cIndexesAssignment_1_0_0_0_4 = (Assignment)cGroup_1_0_0_0.eContents().get(4);
		private final RuleCall cIndexesJpRangeParserRuleCall_1_0_0_0_4_0 = (RuleCall)cIndexesAssignment_1_0_0_0_4.eContents().get(0);
		private final Group cGroup_1_0_0_0_5 = (Group)cGroup_1_0_0_0.eContents().get(5);
		private final Keyword cCommaKeyword_1_0_0_0_5_0 = (Keyword)cGroup_1_0_0_0_5.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_0_0_5_1 = (Assignment)cGroup_1_0_0_0_5.eContents().get(1);
		private final RuleCall cIndexesJpRangeParserRuleCall_1_0_0_0_5_1_0 = (RuleCall)cIndexesAssignment_1_0_0_0_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_0_6 = (Keyword)cGroup_1_0_0_0.eContents().get(6);
		private final Group cGroup_1_0_0_0_7 = (Group)cGroup_1_0_0_0.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_0_7_0 = (Keyword)cGroup_1_0_0_0_7.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_0_0_7_1 = (Assignment)cGroup_1_0_0_0_7.eContents().get(1);
		private final RuleCall cIndexesXExpressionParserRuleCall_1_0_0_0_7_1_0 = (RuleCall)cIndexesAssignment_1_0_0_0_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_0_0_7_2 = (Keyword)cGroup_1_0_0_0_7.eContents().get(2);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_8 = (RuleCall)cGroup_1_0_0_0.eContents().get(8);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0 = (CrossReference)cFeatureAssignment_1_1_0_0_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_1_0_0_3 = (RuleCall)cGroup_1_1_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_2_0_0_1 = (Alternatives)cGroup_1_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2_0_0_1_0 = (Keyword)cAlternatives_1_2_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_2_0_0_1_1 = (Assignment)cAlternatives_1_2_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_2_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_2_0_0_1_2 = (Assignment)cAlternatives_1_2_0_0_1.eContents().get(2);
		private final Keyword cExplicitStaticColonColonKeyword_1_2_0_0_1_2_0 = (Keyword)cExplicitStaticAssignment_1_2_0_0_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1_1.eContents().get(0);
		private final Group cGroup_1_2_1_2 = (Group)cGroup_1_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_1_2_0 = (Keyword)cGroup_1_2_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1_2_1 = (Assignment)cGroup_1_2_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_2_1_3 = (Keyword)cGroup_1_2_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_2_2_0 = (CrossReference)cFeatureAssignment_1_2_2.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_2_2_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_2_2_0.eContents().get(1);
		private final Group cGroup_1_2_3 = (Group)cGroup_1_2.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_2_3_0 = (Assignment)cGroup_1_2_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_2_3_0.eContents().get(0);
		private final Group cGroup_1_2_3_1 = (Group)cGroup_1_2_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_2_3_1_0 = (Assignment)cGroup_1_2_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_2_3_1_0.eContents().get(0);
		private final Group cGroup_1_2_3_1_1 = (Group)cGroup_1_2_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_3_1_1_0 = (Keyword)cGroup_1_2_3_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_2_3_1_1_1 = (Assignment)cGroup_1_2_3_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_2_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_3_2 = (Keyword)cGroup_1_2_3.eContents().get(2);
		
		//@Override
		//XMemberFeatureCall returns XExpression:
		//    XPrimaryExpression
		//    (=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign) value=XAssignment
		//    |=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
		//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//        feature=[types::JvmIdentifiableElement|IdOrSuper]
		//        ( =>explicitOperationCall?='('
		//            (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
		//        )?
		//    )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XPrimaryExpression
		//(=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//    OpSingleAssign) value=XAssignment
		//|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
		//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//    feature=[types::JvmIdentifiableElement|IdOrSuper]
		//    ( =>explicitOperationCall?='('
		//        (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
		//    )?
		//)*
		public Group getGroup() { return cGroup; }
		
		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }
		
		//(=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//    OpSingleAssign) value=XAssignment
		//|=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		//|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
		//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//    feature=[types::JvmIdentifiableElement|IdOrSuper]
		//    ( =>explicitOperationCall?='('
		//        (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
		//    )?
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign) value=XAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
		//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
		//        OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{JpAssignment.assignable=current}
		public Action getJpAssignmentAssignableAction_1_0_0_0_0() { return cJpAssignmentAssignableAction_1_0_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }
		
		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }
		
		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0; }
		
		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_0_0_0_2_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0_0_3() { return cLeftSquareBracketKeyword_1_0_0_0_3; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_1_0_0_0_4() { return cIndexesAssignment_1_0_0_0_4; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_1_0_0_0_4_0() { return cIndexesJpRangeParserRuleCall_1_0_0_0_4_0; }
		
		//(',' indexes+=JpRange)*
		public Group getGroup_1_0_0_0_5() { return cGroup_1_0_0_0_5; }
		
		//','
		public Keyword getCommaKeyword_1_0_0_0_5_0() { return cCommaKeyword_1_0_0_0_5_0; }
		
		//indexes+=JpRange
		public Assignment getIndexesAssignment_1_0_0_0_5_1() { return cIndexesAssignment_1_0_0_0_5_1; }
		
		//JpRange
		public RuleCall getIndexesJpRangeParserRuleCall_1_0_0_0_5_1_0() { return cIndexesJpRangeParserRuleCall_1_0_0_0_5_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_0_0_6() { return cRightSquareBracketKeyword_1_0_0_0_6; }
		
		//('[' indexes+=XExpression ']')*
		public Group getGroup_1_0_0_0_7() { return cGroup_1_0_0_0_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0_0_7_0() { return cLeftSquareBracketKeyword_1_0_0_0_7_0; }
		
		//indexes+=XExpression
		public Assignment getIndexesAssignment_1_0_0_0_7_1() { return cIndexesAssignment_1_0_0_0_7_1; }
		
		//XExpression
		public RuleCall getIndexesXExpressionParserRuleCall_1_0_0_0_7_1_0() { return cIndexesXExpressionParserRuleCall_1_0_0_0_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_0_0_7_2() { return cRightSquareBracketKeyword_1_0_0_0_7_2; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_8() { return cOpSingleAssignParserRuleCall_1_0_0_0_8; }
		
		//value=XAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }
		
		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_0_1_0() { return cValueXAssignmentParserRuleCall_1_0_1_0; }
		
		//=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_1_0_0_0() { return cXAssignmentAssignableAction_1_1_0_0_0; }
		
		//('.'|explicitStatic?="::")
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }
		
		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_1() { return cExplicitStaticAssignment_1_1_0_0_1_1; }
		
		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_1_0_0_1_1_0() { return cExplicitStaticColonColonKeyword_1_1_0_0_1_1_0; }
		
		//feature=[types::JvmIdentifiableElement|FeatureCallID]
		public Assignment getFeatureAssignment_1_1_0_0_2() { return cFeatureAssignment_1_1_0_0_2; }
		
		//[types::JvmIdentifiableElement|FeatureCallID]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_1_0_0_2_0; }
		
		//FeatureCallID
		public RuleCall getFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1() { return cFeatureJvmIdentifiableElementFeatureCallIDParserRuleCall_1_1_0_0_2_0_1; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_1_0_0_3() { return cOpSingleAssignParserRuleCall_1_1_0_0_3; }
		
		//value=XAssignment
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_1_1_0() { return cValueXAssignmentParserRuleCall_1_1_1_0; }
		
		//=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
		//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		//        feature=[types::JvmIdentifiableElement|IdOrSuper]
		//        ( =>explicitOperationCall?='('
		//            (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
		//        )?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//{XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }
		
		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0; }
		
		//("."|nullSafe?="?."|explicitStatic?="::")
		public Alternatives getAlternatives_1_2_0_0_1() { return cAlternatives_1_2_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_2_0_0_1_0() { return cFullStopKeyword_1_2_0_0_1_0; }
		
		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_2_0_0_1_1() { return cNullSafeAssignment_1_2_0_0_1_1; }
		
		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_2_0_0_1_1_0; }
		
		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_2_0_0_1_2() { return cExplicitStaticAssignment_1_2_0_0_1_2; }
		
		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_2_0_0_1_2_0() { return cExplicitStaticColonColonKeyword_1_2_0_0_1_2_0; }
		
		//('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_2_1_0() { return cLessThanSignKeyword_1_2_1_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1_1() { return cTypeArgumentsAssignment_1_2_1_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_1_0; }
		
		//(',' typeArguments+=JvmArgumentTypeReference)*
		public Group getGroup_1_2_1_2() { return cGroup_1_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_2_0() { return cCommaKeyword_1_2_1_2_0; }
		
		//typeArguments+=JvmArgumentTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1_2_1() { return cTypeArgumentsAssignment_1_2_1_2_1; }
		
		//JvmArgumentTypeReference
		public RuleCall getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0() { return cTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2_1_3() { return cGreaterThanSignKeyword_1_2_1_3; }
		
		//feature=[types::JvmIdentifiableElement|IdOrSuper]
		public Assignment getFeatureAssignment_1_2_2() { return cFeatureAssignment_1_2_2; }
		
		//[types::JvmIdentifiableElement|IdOrSuper]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_2_2_0() { return cFeatureJvmIdentifiableElementCrossReference_1_2_2_0; }
		
		//IdOrSuper
		public RuleCall getFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_2_2_0_1() { return cFeatureJvmIdentifiableElementIdOrSuperParserRuleCall_1_2_2_0_1; }
		
		//( =>explicitOperationCall?='('
		//    (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
		//)?
		public Group getGroup_1_2_3() { return cGroup_1_2_3; }
		
		//=>explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_1_2_3_0() { return cExplicitOperationCallAssignment_1_2_3_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_2_3_0_0; }
		
		//(memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
		public Group getGroup_1_2_3_1() { return cGroup_1_2_3_1; }
		
		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_2_3_1_0() { return cMemberCallArgumentsAssignment_1_2_3_1_0; }
		
		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_0_0; }
		
		//(',' memberCallArguments+=XExpression)*
		public Group getGroup_1_2_3_1_1() { return cGroup_1_2_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_3_1_1_0() { return cCommaKeyword_1_2_3_1_1_0; }
		
		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_2_3_1_1_1() { return cMemberCallArgumentsAssignment_1_2_3_1_1_1; }
		
		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_2_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_3_2() { return cRightParenthesisKeyword_1_2_3_2; }
	}
	public class XTryCatchFinallyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XTryCatchFinallyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTryCatchFinallyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClausesXCatchClauseParserRuleCall_3_0_0_0 = (RuleCall)cCatchClausesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cFinallyKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXBlockExpressionParserRuleCall_3_0_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXBlockExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_1_1.eContents().get(0);
		
		///**
		// * Java needs blocks for try, catch, finally
		// */
		//@Override
		//XTryCatchFinallyExpression returns XExpression:
		//    {XTryCatchFinallyExpression}
		//    'try' expression=XBlockExpression
		//    (
		//        catchClauses+=XCatchClause+
		//        (=>'finally' finallyExpression=XBlockExpression)?
		//    |    'finally' finallyExpression=XBlockExpression
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XTryCatchFinallyExpression}
		//'try' expression=XBlockExpression
		//(
		//    catchClauses+=XCatchClause+
		//    (=>'finally' finallyExpression=XBlockExpression)?
		//|    'finally' finallyExpression=XBlockExpression
		//)
		public Group getGroup() { return cGroup; }
		
		//{XTryCatchFinallyExpression}
		public Action getXTryCatchFinallyExpressionAction_0() { return cXTryCatchFinallyExpressionAction_0; }
		
		//'try'
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }
		
		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_0() { return cExpressionXBlockExpressionParserRuleCall_2_0; }
		
		//(
		//    catchClauses+=XCatchClause+
		//    (=>'finally' finallyExpression=XBlockExpression)?
		//|    'finally' finallyExpression=XBlockExpression
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//catchClauses+=XCatchClause+
		//(=>'finally' finallyExpression=XBlockExpression)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//catchClauses+=XCatchClause+
		public Assignment getCatchClausesAssignment_3_0_0() { return cCatchClausesAssignment_3_0_0; }
		
		//XCatchClause
		public RuleCall getCatchClausesXCatchClauseParserRuleCall_3_0_0_0() { return cCatchClausesXCatchClauseParserRuleCall_3_0_0_0; }
		
		//(=>'finally' finallyExpression=XBlockExpression)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//=>'finally'
		public Keyword getFinallyKeyword_3_0_1_0() { return cFinallyKeyword_3_0_1_0; }
		
		//finallyExpression=XBlockExpression
		public Assignment getFinallyExpressionAssignment_3_0_1_1() { return cFinallyExpressionAssignment_3_0_1_1; }
		
		//XBlockExpression
		public RuleCall getFinallyExpressionXBlockExpressionParserRuleCall_3_0_1_1_0() { return cFinallyExpressionXBlockExpressionParserRuleCall_3_0_1_1_0; }
		
		//'finally' finallyExpression=XBlockExpression
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'finally'
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }
		
		//finallyExpression=XBlockExpression
		public Assignment getFinallyExpressionAssignment_3_1_1() { return cFinallyExpressionAssignment_3_1_1; }
		
		//XBlockExpression
		public RuleCall getFinallyExpressionXBlockExpressionParserRuleCall_3_1_1_0() { return cFinallyExpressionXBlockExpressionParserRuleCall_3_1_1_0; }
	}
	public class XCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//@Override
		//XCatchClause :
		//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XBlockExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//=>'catch'
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//declaredParam=FullJvmFormalParameter
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }
		
		//FullJvmFormalParameter
		public RuleCall getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0() { return cDeclaredParamFullJvmFormalParameterParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//expression=XBlockExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_4_0() { return cExpressionXBlockExpressionParserRuleCall_4_0; }
	}
	public class XSynchronizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XSynchronizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXSynchronizedExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cSynchronizedKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamXExpressionParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		///**
		// * Java needs block for synchronized
		// */
		//@Override
		//XSynchronizedExpression returns XExpression:
		//    =>({XSynchronizedExpression}
		//    'synchronized' '(') param=XExpression ')' expression=XBlockExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//=>({XSynchronizedExpression}
		//'synchronized' '(') param=XExpression ')' expression=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//=>({XSynchronizedExpression}
		//'synchronized' '(')
		public Group getGroup_0() { return cGroup_0; }
		
		//{XSynchronizedExpression}
		//    'synchronized' '('
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{XSynchronizedExpression}
		public Action getXSynchronizedExpressionAction_0_0_0() { return cXSynchronizedExpressionAction_0_0_0; }
		
		//'synchronized'
		public Keyword getSynchronizedKeyword_0_0_1() { return cSynchronizedKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }
		
		//param=XExpression
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//XExpression
		public RuleCall getParamXExpressionParserRuleCall_1_0() { return cParamXExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//expression=XBlockExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_3_0() { return cExpressionXBlockExpressionParserRuleCall_3_0; }
	}
	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyJpStatementOrBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//@Override
		//XWhileExpression returns XExpression:
		//    {XWhileExpression}
		//    'while' '(' predicate=XExpression ')'
		//        body=JpStatementOrBlock
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XWhileExpression}
		//'while' '(' predicate=XExpression ')'
		//    body=JpStatementOrBlock
		public Group getGroup() { return cGroup; }
		
		//{XWhileExpression}
		public Action getXWhileExpressionAction_0() { return cXWhileExpressionAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//predicate=XExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_3_0() { return cPredicateXExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//body=JpStatementOrBlock
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//JpStatementOrBlock
		public RuleCall getBodyJpStatementOrBlockParserRuleCall_5_0() { return cBodyJpStatementOrBlockParserRuleCall_5_0; }
	}
	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cn.simbaba.mydsl.Jp.XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyJpStatementOrBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateXExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//@Override
		//XDoWhileExpression returns XExpression:
		//    {XDoWhileExpression}
		//   'do'
		//       body=JpStatementOrBlock
		//   'while' '(' predicate=XExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// {XDoWhileExpression}
		//'do'
		//    body=JpStatementOrBlock
		//'while' '(' predicate=XExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{XDoWhileExpression}
		public Action getXDoWhileExpressionAction_0() { return cXDoWhileExpressionAction_0; }
		
		//'do'
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }
		
		//body=JpStatementOrBlock
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//JpStatementOrBlock
		public RuleCall getBodyJpStatementOrBlockParserRuleCall_2_0() { return cBodyJpStatementOrBlockParserRuleCall_2_0; }
		
		//'while'
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//predicate=XExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }
		
		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_5_0() { return cPredicateXExpressionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	
	
	private final JpModelElements pJpModel;
	private final JpScriptElements pJpScript;
	private final JpScriptBodyElements pJpScriptBody;
	private final JpElementElements pJpElement;
	private final JpPackageDeclarationElements pJpPackageDeclaration;
	private final JpClassElements pJpClass;
	private final JpFeatureElements pJpFeature;
	private final JpPropertyElements pJpProperty;
	private final JpOperationElements pJpOperation;
	private final JpStatementOrBlockElements pJpStatementOrBlock;
	private final JpSingleStatementElements pJpSingleStatement;
	private final JpBranchingStatementElements pJpBranchingStatement;
	private final IdOrSuperElements pIdOrSuper;
	private final JpWithOpenAsCallElements pJpWithOpenAsCall;
	private final XFeatureCallElements pXFeatureCall;
	private final JpArrayConstructorCallElements pJpArrayConstructorCall;
	private final JpArrayLiteralElements pJpArrayLiteral;
	private final XLiteralElements pXLiteral;
	private final JpArrayDimensionElements pJpArrayDimension;
	private final JpFeatureCallWithArrayAccessElements pJpFeatureCallWithArrayAccess;
	private final JpPrefixOperationElements pJpPrefixOperation;
	private final JpIndexElements pJpIndex;
	private final JpRangeElements pJpRange;
	private final JpLetVarDeclarationElements pJpLetVarDeclaration;
	private final JpAdditionalVariableDeclarationElements pJpAdditionalVariableDeclaration;
	private final JpWithOpenAsElements pJpWithOpenAs;
	private final XAndExpressionElements pXAndExpression;
	private final XBitwiseInclusiveOrExpressionElements pXBitwiseInclusiveOrExpression;
	private final OpInclusiveOrElements pOpInclusiveOr;
	private final XBitwiseExclusiveOrExpressionElements pXBitwiseExclusiveOrExpression;
	private final OpExclusiveOrElements pOpExclusiveOr;
	private final XBitwiseAndExpressionElements pXBitwiseAndExpression;
	private final OpBitwiseAndElements pOpBitwiseAnd;
	private final OpUnaryElements pOpUnary;
	private final OpMultiAssignElements pOpMultiAssign;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XBlockExpressionElements pXBlockExpression;
	private final XExpressionOrVarDeclarationElements pXExpressionOrVarDeclaration;
	private final XIfExpressionElements pXIfExpression;
	private final XForLoopExpressionElements pXForLoopExpression;
	private final XPostfixOperationElements pXPostfixOperation;
	private final XBasicForLoopExpressionElements pXBasicForLoopExpression;
	private final XImportDeclarationElements pXImportDeclaration;
	private final JpAssignmentElements pJpAssignment;
	private final XAssignmentElements pXAssignment;
	private final XMemberFeatureCallElements pXMemberFeatureCall;
	private final XTryCatchFinallyExpressionElements pXTryCatchFinallyExpression;
	private final XCatchClauseElements pXCatchClause;
	private final XSynchronizedExpressionElements pXSynchronizedExpression;
	private final XWhileExpressionElements pXWhileExpression;
	private final XDoWhileExpressionElements pXDoWhileExpression;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public JpGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pJpModel = new JpModelElements();
		this.pJpScript = new JpScriptElements();
		this.pJpScriptBody = new JpScriptBodyElements();
		this.pJpElement = new JpElementElements();
		this.pJpPackageDeclaration = new JpPackageDeclarationElements();
		this.pJpClass = new JpClassElements();
		this.pJpFeature = new JpFeatureElements();
		this.pJpProperty = new JpPropertyElements();
		this.pJpOperation = new JpOperationElements();
		this.pJpStatementOrBlock = new JpStatementOrBlockElements();
		this.pJpSingleStatement = new JpSingleStatementElements();
		this.pJpBranchingStatement = new JpBranchingStatementElements();
		this.pIdOrSuper = new IdOrSuperElements();
		this.pJpWithOpenAsCall = new JpWithOpenAsCallElements();
		this.pXFeatureCall = new XFeatureCallElements();
		this.pJpArrayConstructorCall = new JpArrayConstructorCallElements();
		this.pJpArrayLiteral = new JpArrayLiteralElements();
		this.pXLiteral = new XLiteralElements();
		this.pJpArrayDimension = new JpArrayDimensionElements();
		this.pJpFeatureCallWithArrayAccess = new JpFeatureCallWithArrayAccessElements();
		this.pJpPrefixOperation = new JpPrefixOperationElements();
		this.pJpIndex = new JpIndexElements();
		this.pJpRange = new JpRangeElements();
		this.pJpLetVarDeclaration = new JpLetVarDeclarationElements();
		this.pJpAdditionalVariableDeclaration = new JpAdditionalVariableDeclarationElements();
		this.pJpWithOpenAs = new JpWithOpenAsElements();
		this.pXAndExpression = new XAndExpressionElements();
		this.pXBitwiseInclusiveOrExpression = new XBitwiseInclusiveOrExpressionElements();
		this.pOpInclusiveOr = new OpInclusiveOrElements();
		this.pXBitwiseExclusiveOrExpression = new XBitwiseExclusiveOrExpressionElements();
		this.pOpExclusiveOr = new OpExclusiveOrElements();
		this.pXBitwiseAndExpression = new XBitwiseAndExpressionElements();
		this.pOpBitwiseAnd = new OpBitwiseAndElements();
		this.pOpUnary = new OpUnaryElements();
		this.pOpMultiAssign = new OpMultiAssignElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXBlockExpression = new XBlockExpressionElements();
		this.pXExpressionOrVarDeclaration = new XExpressionOrVarDeclarationElements();
		this.pXIfExpression = new XIfExpressionElements();
		this.pXForLoopExpression = new XForLoopExpressionElements();
		this.pXPostfixOperation = new XPostfixOperationElements();
		this.pXBasicForLoopExpression = new XBasicForLoopExpressionElements();
		this.pXImportDeclaration = new XImportDeclarationElements();
		this.pJpAssignment = new JpAssignmentElements();
		this.pXAssignment = new XAssignmentElements();
		this.pXMemberFeatureCall = new XMemberFeatureCallElements();
		this.pXTryCatchFinallyExpression = new XTryCatchFinallyExpressionElements();
		this.pXCatchClause = new XCatchClauseElements();
		this.pXSynchronizedExpression = new XSynchronizedExpressionElements();
		this.pXWhileExpression = new XWhileExpressionElements();
		this.pXDoWhileExpression = new XDoWhileExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("cn.simbaba.mydsl.Jp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//JpModel:
	//    importSection=XImportSection?
	//    elements+=JpElement*
	//    scripts=JpScript?
	//;
	public JpModelElements getJpModelAccess() {
		return pJpModel;
	}
	
	public ParserRule getJpModelRule() {
		return getJpModelAccess().getRule();
	}
	
	//JpScript:
	//    'script' name=ValidID 'by' author=ID (=>'extends' superType=JvmParameterizedTypeReference)?
	//    operations+=JpOperation*
	//    scriptBody=JpScriptBody
	//;
	public JpScriptElements getJpScriptAccess() {
		return pJpScript;
	}
	
	public ParserRule getJpScriptRule() {
		return getJpScriptAccess().getRule();
	}
	
	//JpScriptBody returns XBlockExpression:
	//    {ScriptBody}
	//    (expressions+=JpStatementOrBlock ';'?)*
	//;
	public JpScriptBodyElements getJpScriptBodyAccess() {
		return pJpScriptBody;
	}
	
	public ParserRule getJpScriptBodyRule() {
		return getJpScriptBodyAccess().getRule();
	}
	
	//JpElement:
	//    JpPackageDeclaration | JpClass;
	public JpElementElements getJpElementAccess() {
		return pJpElement;
	}
	
	public ParserRule getJpElementRule() {
		return getJpElementAccess().getRule();
	}
	
	//JpPackageDeclaration:
	//    'package' name=QualifiedName '{'
	//        elements+=JpElement*
	//    '}'
	//;
	public JpPackageDeclarationElements getJpPackageDeclarationAccess() {
		return pJpPackageDeclaration;
	}
	
	public ParserRule getJpPackageDeclarationRule() {
		return getJpPackageDeclarationAccess().getRule();
	}
	
	//JpClass:
	//    'class' name=ValidID ('extends' superType=JvmParameterizedTypeReference)? '{'
	//        features+=JpFeature*
	//    '}'
	//;
	public JpClassElements getJpClassAccess() {
		return pJpClass;
	}
	
	public ParserRule getJpClassRule() {
		return getJpClassAccess().getRule();
	}
	
	//JpFeature:
	//    JpProperty | JpOperation
	//;
	public JpFeatureElements getJpFeatureAccess() {
		return pJpFeature;
	}
	
	public ParserRule getJpFeatureRule() {
		return getJpFeatureAccess().getRule();
	}
	
	//JpProperty:
	//    name=ValidID ':' type=JvmTypeReference
	//;
	public JpPropertyElements getJpPropertyAccess() {
		return pJpProperty;
	}
	
	public ParserRule getJpPropertyRule() {
		return getJpPropertyAccess().getRule();
	}
	
	//JpOperation:
	//    'def' name=ValidID '(' (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' (':' type=JvmTypeReference)?
	//    body=XBlockExpression
	//;
	public JpOperationElements getJpOperationAccess() {
		return pJpOperation;
	}
	
	public ParserRule getJpOperationRule() {
		return getJpOperationAccess().getRule();
	}
	
	///**
	// * refer JBase
	// * The syntactic predicate on XBlockExpression is required to avoid
	// * ambiguity with array literal.  However, XBlockExpression must come first, to
	// * be able to parse both while(...) {} and while(...) st; for example.
	// * If we put the predicate on single statement, then it does not seem to
	// * be possible to parse incomplete member feature call.
	// */
	//JpStatementOrBlock returns XExpression:
	////    JpArrayConstructorCall | not a valid statement
	//    =>XBlockExpression |
	//    JpSingleStatement
	//;
	public JpStatementOrBlockElements getJpStatementOrBlockAccess() {
		return pJpStatementOrBlock;
	}
	
	public ParserRule getJpStatementOrBlockRule() {
		return getJpStatementOrBlockAccess().getRule();
	}
	
	//JpSingleStatement returns XExpression:
	//    XSwitchExpression |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XTryCatchFinallyExpression |
	//    XSynchronizedExpression |
	//    JpBranchingStatement |
	//    XExpressionOrVarDeclaration |
	//    XDoWhileExpression |
	//    XReturnExpression |
	//    XThrowExpression |
	//    XSynchronizedExpression |
	//    JpWithOpenAs
	//;
	public JpSingleStatementElements getJpSingleStatementAccess() {
		return pJpSingleStatement;
	}
	
	public ParserRule getJpSingleStatementRule() {
		return getJpSingleStatementAccess().getRule();
	}
	
	//JpBranchingStatement returns XExpression:
	//    {JpContinueStatement} "continue" |
	//    {JpBreakStatement} "break"
	//;
	public JpBranchingStatementElements getJpBranchingStatementAccess() {
		return pJpBranchingStatement;
	}
	
	public ParserRule getJpBranchingStatementRule() {
		return getJpBranchingStatementAccess().getRule();
	}
	
	//@Override
	//IdOrSuper :
	//    FeatureCallID | 'super' | 'open'
	//;
	public IdOrSuperElements getIdOrSuperAccess() {
		return pIdOrSuper;
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//JpWithOpenAsCall returns XFeatureCall:
	//    {JpWithOpenCall}
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)* )?
	//    ')')?
	//;
	public JpWithOpenAsCallElements getJpWithOpenAsCallAccess() {
		return pJpWithOpenAsCall;
	}
	
	public ParserRule getJpWithOpenAsCallRule() {
		return getJpWithOpenAsCallAccess().getRule();
	}
	
	//@Override
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//;
	public XFeatureCallElements getXFeatureCallAccess() {
		return pXFeatureCall;
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//// dimensions and dimension expressions (feature indexes) are not associated during parsing,
	//// the association, i.e., knowing whether a dimension expression comes after
	//// an empty dimension (which is not legal), will be retrieved by
	//// JpModelUtil.arrayDimensionIndexAssociations(JpArrayConstructorCall)
	//// based on the offset of the [ and the array dimension XEpression
	//JpArrayConstructorCall returns XExpression:
	//    =>({JpArrayConstructorCall}
	//    'new'
	//    type=[types::JvmType|QualifiedName] dimensions+=JpArrayDimension)
	//    // getting here is enough to tell it's an array constructor call
	//    (indexes+=XExpression)? ']'
	//    (=>dimensions+=JpArrayDimension (indexes+=XExpression)? ']')*
	//    (=>arrayLiteral=JpArrayLiteral)?
	//;
	public JpArrayConstructorCallElements getJpArrayConstructorCallAccess() {
		return pJpArrayConstructorCall;
	}
	
	public ParserRule getJpArrayConstructorCallRule() {
		return getJpArrayConstructorCallAccess().getRule();
	}
	
	//// it is a subclass of XListLiteral, so that we will reuse
	//// type computation and compiler from Xbase
	//JpArrayLiteral returns XListLiteral:
	//    {JpArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public JpArrayLiteralElements getJpArrayLiteralAccess() {
		return pJpArrayLiteral;
	}
	
	public ParserRule getJpArrayLiteralRule() {
		return getJpArrayLiteralAccess().getRule();
	}
	
	//@Override
	//XLiteral returns XExpression:
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    JpArrayLiteral
	//;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//// We need an EObject instead of a simple String since we then
	//// need to find the corresponding node (and offset) with NodeModelUtils
	//// in order to associate dimensions with indexes
	//JpArrayDimension:
	//    {JpArrayDimension} '['
	//;
	public JpArrayDimensionElements getJpArrayDimensionAccess() {
		return pJpArrayDimension;
	}
	
	public ParserRule getJpArrayDimensionRule() {
		return getJpArrayDimensionAccess().getRule();
	}
	
	//JpFeatureCallWithArrayAccess returns XExpression:
	//    XFeatureCall (
	//        =>({JpArrayAccessExpression.array=current}
	//        indexes+=JpIndex (=>indexes+=JpIndex)*)
	//    )?
	//;
	public JpFeatureCallWithArrayAccessElements getJpFeatureCallWithArrayAccessAccess() {
		return pJpFeatureCallWithArrayAccess;
	}
	
	public ParserRule getJpFeatureCallWithArrayAccessRule() {
		return getJpFeatureCallWithArrayAccessAccess().getRule();
	}
	
	//// inherit XPostfixOperation, reuse it's code
	//JpPrefixOperation returns XPostfixOperation:
	//    {JpPrefixOperation}
	//;
	public JpPrefixOperationElements getJpPrefixOperationAccess() {
		return pJpPrefixOperation;
	}
	
	public ParserRule getJpPrefixOperationRule() {
		return getJpPrefixOperationAccess().getRule();
	}
	
	//JpIndex returns XExpression:
	//    {JpIndex}
	//    '[' indexes+=JpRange (',' indexes+=JpRange)* ']'
	//;
	public JpIndexElements getJpIndexAccess() {
		return pJpIndex;
	}
	
	public ParserRule getJpIndexRule() {
		return getJpIndexAccess().getRule();
	}
	
	//JpRange returns XExpression:
	//    {JpPrefixOperation} feature=[types::JvmIdentifiableElement|':'] operand=XAdditiveExpression
	//    | {JpPrefixOperation} feature=[types::JvmIdentifiableElement|':']
	//    | XAdditiveExpression (
	//        =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|':'])?
	//       |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression)
	//    )
	//;
	public JpRangeElements getJpRangeAccess() {
		return pJpRange;
	}
	
	public ParserRule getJpRangeRule() {
		return getJpRangeAccess().getRule();
	}
	
	//JpLetVarDeclaration returns XVariableDeclaration:
	//    =>({JpLetVarDeclaration}
	//    'let' name=ValidID) (',' other+=JpAdditionalVariableDeclaration)* '=' right=XExpression
	//;
	public JpLetVarDeclarationElements getJpLetVarDeclarationAccess() {
		return pJpLetVarDeclaration;
	}
	
	public ParserRule getJpLetVarDeclarationRule() {
		return getJpLetVarDeclarationAccess().getRule();
	}
	
	//JpAdditionalVariableDeclaration returns XVariableDeclaration:
	//    {JpAdditionalVariableDeclaration}
	//    name=ValidID;
	public JpAdditionalVariableDeclarationElements getJpAdditionalVariableDeclarationAccess() {
		return pJpAdditionalVariableDeclaration;
	}
	
	public ParserRule getJpAdditionalVariableDeclarationRule() {
		return getJpAdditionalVariableDeclarationAccess().getRule();
	}
	
	//JpWithOpenAs returns XExpression:
	//    {JpWithOpenAs}
	//    'with' open=JpWithOpenAsCall 'as' name=ValidID withExpression=JpStatementOrBlock
	////    (=>'else' else=JpStatementOrBlock)?
	//;
	public JpWithOpenAsElements getJpWithOpenAsAccess() {
		return pJpWithOpenAs;
	}
	
	public ParserRule getJpWithOpenAsRule() {
		return getJpWithOpenAsAccess().getRule();
	}
	
	//// add bitwise operators with their precedence
	//@Override
	//XAndExpression returns XExpression:
	//    XBitwiseInclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XBitwiseInclusiveOrExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return pXAndExpression;
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//XBitwiseInclusiveOrExpression returns XExpression:
	//    XBitwiseExclusiveOrExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpInclusiveOr]) rightOperand=XBitwiseExclusiveOrExpression)*;
	public XBitwiseInclusiveOrExpressionElements getXBitwiseInclusiveOrExpressionAccess() {
		return pXBitwiseInclusiveOrExpression;
	}
	
	public ParserRule getXBitwiseInclusiveOrExpressionRule() {
		return getXBitwiseInclusiveOrExpressionAccess().getRule();
	}
	
	//OpInclusiveOr:
	//    '|';
	public OpInclusiveOrElements getOpInclusiveOrAccess() {
		return pOpInclusiveOr;
	}
	
	public ParserRule getOpInclusiveOrRule() {
		return getOpInclusiveOrAccess().getRule();
	}
	
	//XBitwiseExclusiveOrExpression returns XExpression:
	//    XBitwiseAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpExclusiveOr]) rightOperand=XBitwiseAndExpression)*;
	public XBitwiseExclusiveOrExpressionElements getXBitwiseExclusiveOrExpressionAccess() {
		return pXBitwiseExclusiveOrExpression;
	}
	
	public ParserRule getXBitwiseExclusiveOrExpressionRule() {
		return getXBitwiseExclusiveOrExpressionAccess().getRule();
	}
	
	//OpExclusiveOr:
	//    '^';
	public OpExclusiveOrElements getOpExclusiveOrAccess() {
		return pOpExclusiveOr;
	}
	
	public ParserRule getOpExclusiveOrRule() {
		return getOpExclusiveOrAccess().getRule();
	}
	
	//XBitwiseAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpBitwiseAnd]) rightOperand=XEqualityExpression)*;
	public XBitwiseAndExpressionElements getXBitwiseAndExpressionAccess() {
		return pXBitwiseAndExpression;
	}
	
	public ParserRule getXBitwiseAndExpressionRule() {
		return getXBitwiseAndExpressionAccess().getRule();
	}
	
	//OpBitwiseAnd:
	//    '&';
	public OpBitwiseAndElements getOpBitwiseAndAccess() {
		return pOpBitwiseAnd;
	}
	
	public ParserRule getOpBitwiseAndRule() {
		return getOpBitwiseAndAccess().getRule();
	}
	
	//// add bitwise not ~
	//@Override
	//OpUnary:
	//    "!" | "-" | "+" | "~";
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//@Override
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '&=' | '|=' | '^=' | // added in Jbase
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return pOpMultiAssign;
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	///**** Override x.base definition ****/
	//@Override
	//XPrimaryExpression returns XExpression:
	//    JpArrayConstructorCall |
	//    XConstructorCall |
	//    JpFeatureCallWithArrayAccess |
	//    XLiteral |
	//    XParenthesizedExpression
	//;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//@Override
	//XBlockExpression returns XExpression:
	//    {XBlockExpression} '{'
	//        (expressions+=JpStatementOrBlock ';'?)*
	//    '}'
	//;
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//@Override
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | JpLetVarDeclaration | XExpression
	//;
	public XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return pXExpressionOrVarDeclaration;
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//@Override
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')' then=JpStatementOrBlock
	//    (=>'else' else=JpStatementOrBlock)?
	//;
	public XIfExpressionElements getXIfExpressionAccess() {
		return pXIfExpression;
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//@Override
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter  (':'|'in')) forExpression=XExpression ')'
	//        eachExpression=JpStatementOrBlock
	//;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return pXForLoopExpression;
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//@Override
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall
	//    (
	//        =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
	//        |=>({JpArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
	//    )?
	//;
	public XPostfixOperationElements getXPostfixOperationAccess() {
		return pXPostfixOperation;
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//@Override
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=JpStatementOrBlock
	//;
	public XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return pXBasicForLoopExpression;
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//@Override
	//XImportDeclaration returns xtype::XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[types::JvmDeclaredType|QualifiedName]
	//        | {JpImportDeclaration} importedNamespace=QualifiedName 'as' alias=ValidID) ';'?
	//;
	public XImportDeclarationElements getXImportDeclarationAccess() {
		return pXImportDeclaration;
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//JpAssignment returns XAssignment:
	//    {JpAssignment}
	//;
	public JpAssignmentElements getJpAssignmentAccess() {
		return pJpAssignment;
	}
	
	public ParserRule getJpAssignmentRule() {
		return getJpAssignmentAccess().getRule();
	}
	
	//@Override
	//XAssignment returns XExpression :
	//    =>({JpAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
	//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
	//        OpSingleAssign) value=XAssignment |
	//    =>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID]
	//        OpSingleAssign) value=XAssignment |
	//    XOrExpression (
	//        =>({JpConditionalExpression.if=current} '?') then=XExpression ':' else=XExpression
	//        |=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?
	//;
	public XAssignmentElements getXAssignmentAccess() {
		return pXAssignment;
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//@Override
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({JpAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|FeatureCallID]
	//        '[' indexes+=JpRange (',' indexes+=JpRange)* ']'('[' indexes+=XExpression ']')*
	//        OpSingleAssign) value=XAssignment
	//    |=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper]
	//        ( =>explicitOperationCall?='('
	//            (memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')'
	//        )?
	//    )*
	//;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return pXMemberFeatureCall;
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	///**
	// * Java needs blocks for try, catch, finally
	// */
	//@Override
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try' expression=XBlockExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XBlockExpression)?
	//    |    'finally' finallyExpression=XBlockExpression
	//    )
	//;
	public XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return pXTryCatchFinallyExpression;
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//@Override
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XBlockExpression
	//;
	public XCatchClauseElements getXCatchClauseAccess() {
		return pXCatchClause;
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	///**
	// * Java needs block for synchronized
	// */
	//@Override
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XBlockExpression
	//;
	public XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return pXSynchronizedExpression;
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//@Override
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=JpStatementOrBlock
	//;
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return pXWhileExpression;
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//@Override
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//   'do'
	//       body=JpStatementOrBlock
	//   'while' '(' predicate=XExpression ')'
	//;
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return pXDoWhileExpression;
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
