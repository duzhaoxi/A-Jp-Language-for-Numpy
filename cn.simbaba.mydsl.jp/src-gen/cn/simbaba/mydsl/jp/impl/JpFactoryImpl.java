/**
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.jp.impl;

import cn.simbaba.mydsl.jp.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JpFactoryImpl extends EFactoryImpl implements JpFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JpFactory init()
  {
    try
    {
      JpFactory theJpFactory = (JpFactory)EPackage.Registry.INSTANCE.getEFactory(JpPackage.eNS_URI);
      if (theJpFactory != null)
      {
        return theJpFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JpFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JpFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JpPackage.JP_MODEL: return createJpModel();
      case JpPackage.JP_SCRIPT: return createJpScript();
      case JpPackage.JP_ELEMENT: return createJpElement();
      case JpPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      case JpPackage.JP_CLASS: return createJpClass();
      case JpPackage.FEATURE: return createFeature();
      case JpPackage.PROPERTY: return createProperty();
      case JpPackage.OPERATION: return createOperation();
      case JpPackage.JP_ARRAY_DIMENSION: return createJpArrayDimension();
      case JpPackage.SCRIPT_BODY: return createScriptBody();
      case JpPackage.JP_CONTINUE_STATEMENT: return createJpContinueStatement();
      case JpPackage.JP_BREAK_STATEMENT: return createJpBreakStatement();
      case JpPackage.JP_WITH_OPEN_CALL: return createJpWithOpenCall();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL: return createJpArrayConstructorCall();
      case JpPackage.JP_ARRAY_LITERAL: return createJpArrayLiteral();
      case JpPackage.JP_ARRAY_ACCESS_EXPRESSION: return createJpArrayAccessExpression();
      case JpPackage.JP_PREFIX_OPERATION: return createJpPrefixOperation();
      case JpPackage.JP_INDEX: return createJpIndex();
      case JpPackage.JP_LET_VAR_DECLARATION: return createJpLetVarDeclaration();
      case JpPackage.JP_ADDITIONAL_VARIABLE_DECLARATION: return createJpAdditionalVariableDeclaration();
      case JpPackage.JP_WITH_OPEN_AS: return createJpWithOpenAs();
      case JpPackage.JP_IMPORT_DECLARATION: return createJpImportDeclaration();
      case JpPackage.JP_ASSIGNMENT: return createJpAssignment();
      case JpPackage.JP_CONDITIONAL_EXPRESSION: return createJpConditionalExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpModel createJpModel()
  {
    JpModelImpl jpModel = new JpModelImpl();
    return jpModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpScript createJpScript()
  {
    JpScriptImpl jpScript = new JpScriptImpl();
    return jpScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpElement createJpElement()
  {
    JpElementImpl jpElement = new JpElementImpl();
    return jpElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpClass createJpClass()
  {
    JpClassImpl jpClass = new JpClassImpl();
    return jpClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpArrayDimension createJpArrayDimension()
  {
    JpArrayDimensionImpl jpArrayDimension = new JpArrayDimensionImpl();
    return jpArrayDimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptBody createScriptBody()
  {
    ScriptBodyImpl scriptBody = new ScriptBodyImpl();
    return scriptBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpContinueStatement createJpContinueStatement()
  {
    JpContinueStatementImpl jpContinueStatement = new JpContinueStatementImpl();
    return jpContinueStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpBreakStatement createJpBreakStatement()
  {
    JpBreakStatementImpl jpBreakStatement = new JpBreakStatementImpl();
    return jpBreakStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpWithOpenCall createJpWithOpenCall()
  {
    JpWithOpenCallImpl jpWithOpenCall = new JpWithOpenCallImpl();
    return jpWithOpenCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpArrayConstructorCall createJpArrayConstructorCall()
  {
    JpArrayConstructorCallImpl jpArrayConstructorCall = new JpArrayConstructorCallImpl();
    return jpArrayConstructorCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpArrayLiteral createJpArrayLiteral()
  {
    JpArrayLiteralImpl jpArrayLiteral = new JpArrayLiteralImpl();
    return jpArrayLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpArrayAccessExpression createJpArrayAccessExpression()
  {
    JpArrayAccessExpressionImpl jpArrayAccessExpression = new JpArrayAccessExpressionImpl();
    return jpArrayAccessExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpPrefixOperation createJpPrefixOperation()
  {
    JpPrefixOperationImpl jpPrefixOperation = new JpPrefixOperationImpl();
    return jpPrefixOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpIndex createJpIndex()
  {
    JpIndexImpl jpIndex = new JpIndexImpl();
    return jpIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpLetVarDeclaration createJpLetVarDeclaration()
  {
    JpLetVarDeclarationImpl jpLetVarDeclaration = new JpLetVarDeclarationImpl();
    return jpLetVarDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpAdditionalVariableDeclaration createJpAdditionalVariableDeclaration()
  {
    JpAdditionalVariableDeclarationImpl jpAdditionalVariableDeclaration = new JpAdditionalVariableDeclarationImpl();
    return jpAdditionalVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpWithOpenAs createJpWithOpenAs()
  {
    JpWithOpenAsImpl jpWithOpenAs = new JpWithOpenAsImpl();
    return jpWithOpenAs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpImportDeclaration createJpImportDeclaration()
  {
    JpImportDeclarationImpl jpImportDeclaration = new JpImportDeclarationImpl();
    return jpImportDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpAssignment createJpAssignment()
  {
    JpAssignmentImpl jpAssignment = new JpAssignmentImpl();
    return jpAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpConditionalExpression createJpConditionalExpression()
  {
    JpConditionalExpressionImpl jpConditionalExpression = new JpConditionalExpressionImpl();
    return jpConditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpPackage getJpPackage()
  {
    return (JpPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JpPackage getPackage()
  {
    return JpPackage.eINSTANCE;
  }

} //JpFactoryImpl
