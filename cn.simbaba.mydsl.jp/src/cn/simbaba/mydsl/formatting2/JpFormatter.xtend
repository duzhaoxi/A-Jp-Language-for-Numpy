/*
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.formatting2

import cn.simbaba.mydsl.jp.JpModel
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter
import cn.simbaba.mydsl.jp.JpFeature
import cn.simbaba.mydsl.jp.JpElement
import cn.simbaba.mydsl.jp.JpPackageDeclaration
import cn.simbaba.mydsl.jp.JpClass
import cn.simbaba.mydsl.jp.JpOperation

import static cn.simbaba.mydsl.jp.JpPackage.Literals.*
import cn.simbaba.mydsl.jp.JpProperty

class JpFormatter extends XbaseFormatter {
	
	def dispatch void format(JpModel domainmodel, extension IFormattableDocument document) {
		domainmodel.prepend[setNewLines(0, 0, 1); noSpace].append[newLine]
		format(domainmodel.importSection, document)
		for (JpElement element : domainmodel.elements) {
			format(element, document)
		}
	}

	def dispatch void format(JpPackageDeclaration pkg, extension IFormattableDocument document) {
		val open = pkg.regionFor.keyword("{")
		val close = pkg.regionFor.keyword("}")
		pkg.regionFor.feature(JP_ELEMENT__NAME).surround[oneSpace]
		open.append[newLine]
		interior(open, close)[indent]
		for (JpElement element : pkg.elements) {
			element.format
			element.append[setNewLines(1, 1, 2)]
		}
	}

	def dispatch void format(JpClass entity, extension IFormattableDocument document) {
		val open = entity.regionFor.keyword("{")
		val close = entity.regionFor.keyword("}")
		entity.regionFor.feature(JP_ELEMENT__NAME).surround[oneSpace]
		entity.superType.surround[oneSpace]
		open.append[newLine]
		interior(open, close)[indent]
		format(entity.superType, document)
		for (JpFeature feature : entity.features) {
			feature.format
			feature.append[setNewLines(1, 1, 2)]
		}
	}

	def dispatch void format(JpProperty property, extension IFormattableDocument document) {
		property.regionFor.keyword(":").surround[noSpace]
		property.type.format
	}

	def dispatch void format(JpOperation operation, extension IFormattableDocument document) {
		operation.regionFor.keyword("def").append[oneSpace]
		operation.regionFor.keyword("(").surround[noSpace]
		if (!operation.params.isEmpty) {
			for (comma : operation.regionFor.keywords(","))
				comma.prepend[noSpace].append[oneSpace]
			for (params : operation.params)
				params.format
			operation.regionFor.keyword(")").prepend[noSpace]
		}
		if (operation.type !== null) {
			operation.regionFor.keyword(")").append[noSpace]
			operation.type.prepend[noSpace].append[oneSpace]
			operation.type.format
		} else {
			operation.regionFor.keyword(")").append[oneSpace]
		}
		operation.body.format
	}
}
