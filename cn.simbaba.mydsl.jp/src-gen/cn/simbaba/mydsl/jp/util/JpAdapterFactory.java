/**
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.jp.util;

import cn.simbaba.mydsl.jp.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.common.types.JvmIdentifiableElement;

import org.eclipse.xtext.xbase.XAbstractFeatureCall;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XCollectionLiteral;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;

import org.eclipse.xtext.xtype.XImportDeclaration;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see cn.simbaba.mydsl.jp.JpPackage
 * @generated
 */
public class JpAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JpPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JpAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = JpPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JpSwitch<Adapter> modelSwitch =
    new JpSwitch<Adapter>()
    {
      @Override
      public Adapter caseJpModel(JpModel object)
      {
        return createJpModelAdapter();
      }
      @Override
      public Adapter caseJpScript(JpScript object)
      {
        return createJpScriptAdapter();
      }
      @Override
      public Adapter caseJpElement(JpElement object)
      {
        return createJpElementAdapter();
      }
      @Override
      public Adapter casePackageDeclaration(PackageDeclaration object)
      {
        return createPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseJpClass(JpClass object)
      {
        return createJpClassAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseJpArrayDimension(JpArrayDimension object)
      {
        return createJpArrayDimensionAdapter();
      }
      @Override
      public Adapter caseScriptBody(ScriptBody object)
      {
        return createScriptBodyAdapter();
      }
      @Override
      public Adapter caseJpContinueStatement(JpContinueStatement object)
      {
        return createJpContinueStatementAdapter();
      }
      @Override
      public Adapter caseJpBreakStatement(JpBreakStatement object)
      {
        return createJpBreakStatementAdapter();
      }
      @Override
      public Adapter caseJpWithOpenCall(JpWithOpenCall object)
      {
        return createJpWithOpenCallAdapter();
      }
      @Override
      public Adapter caseJpArrayConstructorCall(JpArrayConstructorCall object)
      {
        return createJpArrayConstructorCallAdapter();
      }
      @Override
      public Adapter caseJpArrayLiteral(JpArrayLiteral object)
      {
        return createJpArrayLiteralAdapter();
      }
      @Override
      public Adapter caseJpArrayAccessExpression(JpArrayAccessExpression object)
      {
        return createJpArrayAccessExpressionAdapter();
      }
      @Override
      public Adapter caseJpPrefixOperation(JpPrefixOperation object)
      {
        return createJpPrefixOperationAdapter();
      }
      @Override
      public Adapter caseJpIndex(JpIndex object)
      {
        return createJpIndexAdapter();
      }
      @Override
      public Adapter caseJpLetVarDeclaration(JpLetVarDeclaration object)
      {
        return createJpLetVarDeclarationAdapter();
      }
      @Override
      public Adapter caseJpAdditionalVariableDeclaration(JpAdditionalVariableDeclaration object)
      {
        return createJpAdditionalVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseJpWithOpenAs(JpWithOpenAs object)
      {
        return createJpWithOpenAsAdapter();
      }
      @Override
      public Adapter caseJpImportDeclaration(JpImportDeclaration object)
      {
        return createJpImportDeclarationAdapter();
      }
      @Override
      public Adapter caseJpAssignment(JpAssignment object)
      {
        return createJpAssignmentAdapter();
      }
      @Override
      public Adapter caseJpConditionalExpression(JpConditionalExpression object)
      {
        return createJpConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseXExpression(XExpression object)
      {
        return createXExpressionAdapter();
      }
      @Override
      public Adapter caseXBlockExpression(XBlockExpression object)
      {
        return createXBlockExpressionAdapter();
      }
      @Override
      public Adapter caseXAbstractFeatureCall(XAbstractFeatureCall object)
      {
        return createXAbstractFeatureCallAdapter();
      }
      @Override
      public Adapter caseXFeatureCall(XFeatureCall object)
      {
        return createXFeatureCallAdapter();
      }
      @Override
      public Adapter caseXCollectionLiteral(XCollectionLiteral object)
      {
        return createXCollectionLiteralAdapter();
      }
      @Override
      public Adapter caseXListLiteral(XListLiteral object)
      {
        return createXListLiteralAdapter();
      }
      @Override
      public Adapter caseXPostfixOperation(XPostfixOperation object)
      {
        return createXPostfixOperationAdapter();
      }
      @Override
      public Adapter caseJvmIdentifiableElement(JvmIdentifiableElement object)
      {
        return createJvmIdentifiableElementAdapter();
      }
      @Override
      public Adapter caseXVariableDeclaration(XVariableDeclaration object)
      {
        return createXVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseXImportDeclaration(XImportDeclaration object)
      {
        return createXImportDeclarationAdapter();
      }
      @Override
      public Adapter caseXAssignment(XAssignment object)
      {
        return createXAssignmentAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpModel
   * @generated
   */
  public Adapter createJpModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpScript <em>Script</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpScript
   * @generated
   */
  public Adapter createJpScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpElement <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpElement
   * @generated
   */
  public Adapter createJpElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.PackageDeclaration <em>Package Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.PackageDeclaration
   * @generated
   */
  public Adapter createPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpClass <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpClass
   * @generated
   */
  public Adapter createJpClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpArrayDimension <em>Array Dimension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpArrayDimension
   * @generated
   */
  public Adapter createJpArrayDimensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.ScriptBody <em>Script Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.ScriptBody
   * @generated
   */
  public Adapter createScriptBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpContinueStatement <em>Continue Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpContinueStatement
   * @generated
   */
  public Adapter createJpContinueStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpBreakStatement <em>Break Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpBreakStatement
   * @generated
   */
  public Adapter createJpBreakStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpWithOpenCall <em>With Open Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpWithOpenCall
   * @generated
   */
  public Adapter createJpWithOpenCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpArrayConstructorCall <em>Array Constructor Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpArrayConstructorCall
   * @generated
   */
  public Adapter createJpArrayConstructorCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpArrayLiteral <em>Array Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpArrayLiteral
   * @generated
   */
  public Adapter createJpArrayLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpArrayAccessExpression <em>Array Access Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpArrayAccessExpression
   * @generated
   */
  public Adapter createJpArrayAccessExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpPrefixOperation <em>Prefix Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpPrefixOperation
   * @generated
   */
  public Adapter createJpPrefixOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpIndex <em>Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpIndex
   * @generated
   */
  public Adapter createJpIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpLetVarDeclaration <em>Let Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpLetVarDeclaration
   * @generated
   */
  public Adapter createJpLetVarDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpAdditionalVariableDeclaration <em>Additional Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpAdditionalVariableDeclaration
   * @generated
   */
  public Adapter createJpAdditionalVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpWithOpenAs <em>With Open As</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpWithOpenAs
   * @generated
   */
  public Adapter createJpWithOpenAsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpImportDeclaration <em>Import Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpImportDeclaration
   * @generated
   */
  public Adapter createJpImportDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpAssignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpAssignment
   * @generated
   */
  public Adapter createJpAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cn.simbaba.mydsl.jp.JpConditionalExpression <em>Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cn.simbaba.mydsl.jp.JpConditionalExpression
   * @generated
   */
  public Adapter createJpConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XExpression <em>XExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XExpression
   * @since 2.7
   * @generated
   */
  public Adapter createXExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XBlockExpression <em>XBlock Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XBlockExpression
   * @since 2.7
   * @generated
   */
  public Adapter createXBlockExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XAbstractFeatureCall <em>XAbstract Feature Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XAbstractFeatureCall
   * @since 2.7
   * @generated
   */
  public Adapter createXAbstractFeatureCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XFeatureCall <em>XFeature Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XFeatureCall
   * @since 2.7
   * @generated
   */
  public Adapter createXFeatureCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XCollectionLiteral <em>XCollection Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XCollectionLiteral
   * @since 2.7
   * @generated
   */
  public Adapter createXCollectionLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XListLiteral <em>XList Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XListLiteral
   * @since 2.7
   * @generated
   */
  public Adapter createXListLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XPostfixOperation <em>XPostfix Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XPostfixOperation
   * @since 2.7
   * @generated
   */
  public Adapter createXPostfixOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.common.types.JvmIdentifiableElement <em>Jvm Identifiable Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.common.types.JvmIdentifiableElement
   * @generated
   */
  public Adapter createJvmIdentifiableElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XVariableDeclaration <em>XVariable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XVariableDeclaration
   * @since 2.7
   * @generated
   */
  public Adapter createXVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xtype.XImportDeclaration <em>XImport Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xtype.XImportDeclaration
   * @since 2.7
   * @generated
   */
  public Adapter createXImportDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XAssignment <em>XAssignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XAssignment
   * @since 2.7
   * @generated
   */
  public Adapter createXAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //JpAdapterFactory
