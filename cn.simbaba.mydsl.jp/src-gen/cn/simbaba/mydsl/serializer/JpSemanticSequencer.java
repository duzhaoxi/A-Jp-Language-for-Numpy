/*
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.serializer;

import cn.simbaba.mydsl.jp.JpAdditionalVariableDeclaration;
import cn.simbaba.mydsl.jp.JpArrayAccessExpression;
import cn.simbaba.mydsl.jp.JpArrayConstructorCall;
import cn.simbaba.mydsl.jp.JpArrayDimension;
import cn.simbaba.mydsl.jp.JpArrayLiteral;
import cn.simbaba.mydsl.jp.JpAssignment;
import cn.simbaba.mydsl.jp.JpBreakStatement;
import cn.simbaba.mydsl.jp.JpClass;
import cn.simbaba.mydsl.jp.JpConditionalExpression;
import cn.simbaba.mydsl.jp.JpContinueStatement;
import cn.simbaba.mydsl.jp.JpImportDeclaration;
import cn.simbaba.mydsl.jp.JpIndex;
import cn.simbaba.mydsl.jp.JpLetVarDeclaration;
import cn.simbaba.mydsl.jp.JpModel;
import cn.simbaba.mydsl.jp.JpPackage;
import cn.simbaba.mydsl.jp.JpPrefixOperation;
import cn.simbaba.mydsl.jp.JpScript;
import cn.simbaba.mydsl.jp.JpWithOpenAs;
import cn.simbaba.mydsl.jp.JpWithOpenCall;
import cn.simbaba.mydsl.jp.Operation;
import cn.simbaba.mydsl.jp.PackageDeclaration;
import cn.simbaba.mydsl.jp.Property;
import cn.simbaba.mydsl.jp.ScriptBody;
import cn.simbaba.mydsl.services.JpGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class JpSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private JpGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JpPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JpPackage.JP_ADDITIONAL_VARIABLE_DECLARATION:
				sequence_JpAdditionalVariableDeclaration(context, (JpAdditionalVariableDeclaration) semanticObject); 
				return; 
			case JpPackage.JP_ARRAY_ACCESS_EXPRESSION:
				if (rule == grammarAccess.getJpFeatureCallWithArrayAccessRule()) {
					sequence_JpFeatureCallWithArrayAccess(context, (JpArrayAccessExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJpStatementOrBlockRule()
						|| rule == grammarAccess.getJpSingleStatementRule()
						|| rule == grammarAccess.getJpRangeRule()
						|| action == grammarAccess.getJpRangeAccess().getXPostfixOperationOperandAction_2_1_0_0_0()
						|| action == grammarAccess.getJpRangeAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getJpArrayAccessExpressionArrayAction_1_1_0_0()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getJpConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getJpAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()) {
					sequence_JpFeatureCallWithArrayAccess_XPostfixOperation(context, (JpArrayAccessExpression) semanticObject); 
					return; 
				}
				else break;
			case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL:
				sequence_JpArrayConstructorCall(context, (JpArrayConstructorCall) semanticObject); 
				return; 
			case JpPackage.JP_ARRAY_DIMENSION:
				sequence_JpArrayDimension(context, (JpArrayDimension) semanticObject); 
				return; 
			case JpPackage.JP_ARRAY_LITERAL:
				sequence_JpArrayLiteral(context, (JpArrayLiteral) semanticObject); 
				return; 
			case JpPackage.JP_ASSIGNMENT:
				if (rule == grammarAccess.getJpAssignmentRule()) {
					sequence_JpAssignment(context, (JpAssignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJpStatementOrBlockRule()
						|| rule == grammarAccess.getJpSingleStatementRule()
						|| rule == grammarAccess.getJpRangeRule()
						|| action == grammarAccess.getJpRangeAccess().getXPostfixOperationOperandAction_2_1_0_0_0()
						|| action == grammarAccess.getJpRangeAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getJpArrayAccessExpressionArrayAction_1_1_0_0()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getJpConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getJpAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()) {
					sequence_XAssignment_XMemberFeatureCall(context, (JpAssignment) semanticObject); 
					return; 
				}
				else break;
			case JpPackage.JP_BREAK_STATEMENT:
				sequence_JpBranchingStatement(context, (JpBreakStatement) semanticObject); 
				return; 
			case JpPackage.JP_CLASS:
				sequence_JpClass(context, (JpClass) semanticObject); 
				return; 
			case JpPackage.JP_CONDITIONAL_EXPRESSION:
				sequence_XAssignment(context, (JpConditionalExpression) semanticObject); 
				return; 
			case JpPackage.JP_CONTINUE_STATEMENT:
				sequence_JpBranchingStatement(context, (JpContinueStatement) semanticObject); 
				return; 
			case JpPackage.JP_IMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (JpImportDeclaration) semanticObject); 
				return; 
			case JpPackage.JP_INDEX:
				sequence_JpIndex(context, (JpIndex) semanticObject); 
				return; 
			case JpPackage.JP_LET_VAR_DECLARATION:
				sequence_JpLetVarDeclaration(context, (JpLetVarDeclaration) semanticObject); 
				return; 
			case JpPackage.JP_MODEL:
				sequence_JpModel(context, (JpModel) semanticObject); 
				return; 
			case JpPackage.JP_PREFIX_OPERATION:
				if (rule == grammarAccess.getJpPrefixOperationRule()) {
					sequence_JpPrefixOperation(context, (JpPrefixOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJpRangeRule()) {
					sequence_JpRange(context, (JpPrefixOperation) semanticObject); 
					return; 
				}
				else break;
			case JpPackage.JP_SCRIPT:
				sequence_JpScript(context, (JpScript) semanticObject); 
				return; 
			case JpPackage.JP_WITH_OPEN_AS:
				sequence_JpWithOpenAs(context, (JpWithOpenAs) semanticObject); 
				return; 
			case JpPackage.JP_WITH_OPEN_CALL:
				sequence_JpWithOpenAsCall(context, (JpWithOpenCall) semanticObject); 
				return; 
			case JpPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case JpPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case JpPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case JpPackage.SCRIPT_BODY:
				sequence_ScriptBody(context, (ScriptBody) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				if (rule == grammarAccess.getJpRangeRule()) {
					sequence_JpRange_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJpStatementOrBlockRule()
						|| rule == grammarAccess.getJpSingleStatementRule()
						|| action == grammarAccess.getJpRangeAccess().getXPostfixOperationOperandAction_2_1_0_0_0()
						|| action == grammarAccess.getJpRangeAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getJpArrayAccessExpressionArrayAction_1_1_0_0()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getJpConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getJpAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()) {
					sequence_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getJpStatementOrBlockRule()
						|| rule == grammarAccess.getXBlockExpressionRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXClosureRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				if (rule == grammarAccess.getJpRangeRule()) {
					sequence_JpRange_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJpStatementOrBlockRule()
						|| rule == grammarAccess.getJpSingleStatementRule()
						|| action == grammarAccess.getJpRangeAccess().getXPostfixOperationOperandAction_2_1_0_0_0()
						|| action == grammarAccess.getJpRangeAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseInclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseInclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseExclusiveOrExpressionRule()
						|| action == grammarAccess.getXBitwiseExclusiveOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXBitwiseAndExpressionRule()
						|| action == grammarAccess.getXBitwiseAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0_0()
						|| action == grammarAccess.getXPostfixOperationAccess().getJpArrayAccessExpressionArrayAction_1_1_0_0()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getJpConditionalExpressionIfAction_2_1_0_0_0_0()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_2_1_1_0_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getJpAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_1_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_2_0_0_0()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()) {
					sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JpAdditionalVariableDeclaration returns JpAdditionalVariableDeclaration
	 *
	 * Constraint:
	 *     name=ValidID
	 */
	protected void sequence_JpAdditionalVariableDeclaration(ISerializationContext context, JpAdditionalVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XVARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XVARIABLE_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJpAdditionalVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpArrayConstructorCall
	 *     JpSingleStatement returns JpArrayConstructorCall
	 *     JpArrayConstructorCall returns JpArrayConstructorCall
	 *     JpRange returns JpArrayConstructorCall
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns JpArrayConstructorCall
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns JpArrayConstructorCall
	 *     XAndExpression returns JpArrayConstructorCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XBitwiseInclusiveOrExpression returns JpArrayConstructorCall
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XBitwiseExclusiveOrExpression returns JpArrayConstructorCall
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XBitwiseAndExpression returns JpArrayConstructorCall
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XPrimaryExpression returns JpArrayConstructorCall
	 *     XExpressionOrVarDeclaration returns JpArrayConstructorCall
	 *     XPostfixOperation returns JpArrayConstructorCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns JpArrayConstructorCall
	 *     XAssignment returns JpArrayConstructorCall
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns JpArrayConstructorCall
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns JpArrayConstructorCall
	 *     XMemberFeatureCall returns JpArrayConstructorCall
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns JpArrayConstructorCall
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns JpArrayConstructorCall
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns JpArrayConstructorCall
	 *     XExpression returns JpArrayConstructorCall
	 *     XOrExpression returns JpArrayConstructorCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XEqualityExpression returns JpArrayConstructorCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XRelationalExpression returns JpArrayConstructorCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns JpArrayConstructorCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns JpArrayConstructorCall
	 *     XOtherOperatorExpression returns JpArrayConstructorCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XAdditiveExpression returns JpArrayConstructorCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XMultiplicativeExpression returns JpArrayConstructorCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns JpArrayConstructorCall
	 *     XUnaryOperation returns JpArrayConstructorCall
	 *     XCastedExpression returns JpArrayConstructorCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns JpArrayConstructorCall
	 *     XParenthesizedExpression returns JpArrayConstructorCall
	 *
	 * Constraint:
	 *     (
	 *         type=[JvmType|QualifiedName] 
	 *         dimensions+=JpArrayDimension 
	 *         indexes+=XExpression? 
	 *         (dimensions+=JpArrayDimension indexes+=XExpression?)* 
	 *         arrayLiteral=JpArrayLiteral?
	 *     )
	 */
	protected void sequence_JpArrayConstructorCall(ISerializationContext context, JpArrayConstructorCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpArrayDimension returns JpArrayDimension
	 *
	 * Constraint:
	 *     {JpArrayDimension}
	 */
	protected void sequence_JpArrayDimension(ISerializationContext context, JpArrayDimension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpArrayLiteral
	 *     JpSingleStatement returns JpArrayLiteral
	 *     JpArrayLiteral returns JpArrayLiteral
	 *     XLiteral returns JpArrayLiteral
	 *     JpRange returns JpArrayLiteral
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns JpArrayLiteral
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns JpArrayLiteral
	 *     XAndExpression returns JpArrayLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XBitwiseInclusiveOrExpression returns JpArrayLiteral
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XBitwiseExclusiveOrExpression returns JpArrayLiteral
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XBitwiseAndExpression returns JpArrayLiteral
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XPrimaryExpression returns JpArrayLiteral
	 *     XExpressionOrVarDeclaration returns JpArrayLiteral
	 *     XPostfixOperation returns JpArrayLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns JpArrayLiteral
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns JpArrayLiteral
	 *     XAssignment returns JpArrayLiteral
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns JpArrayLiteral
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns JpArrayLiteral
	 *     XMemberFeatureCall returns JpArrayLiteral
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns JpArrayLiteral
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns JpArrayLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns JpArrayLiteral
	 *     XExpression returns JpArrayLiteral
	 *     XOrExpression returns JpArrayLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XEqualityExpression returns JpArrayLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XRelationalExpression returns JpArrayLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns JpArrayLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns JpArrayLiteral
	 *     XOtherOperatorExpression returns JpArrayLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XAdditiveExpression returns JpArrayLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XMultiplicativeExpression returns JpArrayLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns JpArrayLiteral
	 *     XUnaryOperation returns JpArrayLiteral
	 *     XCastedExpression returns JpArrayLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns JpArrayLiteral
	 *     XParenthesizedExpression returns JpArrayLiteral
	 *
	 * Constraint:
	 *     (elements+=XExpression elements+=XExpression*)?
	 */
	protected void sequence_JpArrayLiteral(ISerializationContext context, JpArrayLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpAssignment returns JpAssignment
	 *
	 * Constraint:
	 *     {JpAssignment}
	 */
	protected void sequence_JpAssignment(ISerializationContext context, JpAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpBreakStatement
	 *     JpSingleStatement returns JpBreakStatement
	 *     JpBranchingStatement returns JpBreakStatement
	 *
	 * Constraint:
	 *     {JpBreakStatement}
	 */
	protected void sequence_JpBranchingStatement(ISerializationContext context, JpBreakStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpContinueStatement
	 *     JpSingleStatement returns JpContinueStatement
	 *     JpBranchingStatement returns JpContinueStatement
	 *
	 * Constraint:
	 *     {JpContinueStatement}
	 */
	protected void sequence_JpBranchingStatement(ISerializationContext context, JpContinueStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpElement returns JpClass
	 *     JpClass returns JpClass
	 *
	 * Constraint:
	 *     (name=ValidID superType=JvmParameterizedTypeReference? features+=Feature*)
	 */
	protected void sequence_JpClass(ISerializationContext context, JpClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpFeatureCallWithArrayAccess returns JpArrayAccessExpression
	 *
	 * Constraint:
	 *     (array=JpFeatureCallWithArrayAccess_JpArrayAccessExpression_1_0_0 indexes+=JpIndex indexes+=JpIndex*)
	 */
	protected void sequence_JpFeatureCallWithArrayAccess(ISerializationContext context, JpArrayAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpArrayAccessExpression
	 *     JpSingleStatement returns JpArrayAccessExpression
	 *     JpRange returns JpArrayAccessExpression
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns JpArrayAccessExpression
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns JpArrayAccessExpression
	 *     XAndExpression returns JpArrayAccessExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XBitwiseInclusiveOrExpression returns JpArrayAccessExpression
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XBitwiseExclusiveOrExpression returns JpArrayAccessExpression
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XBitwiseAndExpression returns JpArrayAccessExpression
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XPrimaryExpression returns JpArrayAccessExpression
	 *     XExpressionOrVarDeclaration returns JpArrayAccessExpression
	 *     XPostfixOperation returns JpArrayAccessExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns JpArrayAccessExpression
	 *     XAssignment returns JpArrayAccessExpression
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns JpArrayAccessExpression
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns JpArrayAccessExpression
	 *     XMemberFeatureCall returns JpArrayAccessExpression
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns JpArrayAccessExpression
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns JpArrayAccessExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns JpArrayAccessExpression
	 *     XExpression returns JpArrayAccessExpression
	 *     XOrExpression returns JpArrayAccessExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XEqualityExpression returns JpArrayAccessExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XRelationalExpression returns JpArrayAccessExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns JpArrayAccessExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns JpArrayAccessExpression
	 *     XOtherOperatorExpression returns JpArrayAccessExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XAdditiveExpression returns JpArrayAccessExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XMultiplicativeExpression returns JpArrayAccessExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns JpArrayAccessExpression
	 *     XUnaryOperation returns JpArrayAccessExpression
	 *     XCastedExpression returns JpArrayAccessExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns JpArrayAccessExpression
	 *     XParenthesizedExpression returns JpArrayAccessExpression
	 *
	 * Constraint:
	 *     (
	 *         (array=JpFeatureCallWithArrayAccess_JpArrayAccessExpression_1_0_0 indexes+=JpIndex indexes+=JpIndex*) | 
	 *         (array=XPostfixOperation_JpArrayAccessExpression_1_1_0_0 indexes+=XExpression indexes+=XExpression*)
	 *     )
	 */
	protected void sequence_JpFeatureCallWithArrayAccess_XPostfixOperation(ISerializationContext context, JpArrayAccessExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpIndex returns JpIndex
	 *
	 * Constraint:
	 *     (indexes+=JpRange indexes+=JpRange*)
	 */
	protected void sequence_JpIndex(ISerializationContext context, JpIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpLetVarDeclaration
	 *     JpSingleStatement returns JpLetVarDeclaration
	 *     JpLetVarDeclaration returns JpLetVarDeclaration
	 *     XExpressionOrVarDeclaration returns JpLetVarDeclaration
	 *
	 * Constraint:
	 *     (name=ValidID other+=JpAdditionalVariableDeclaration* right=XExpression)
	 */
	protected void sequence_JpLetVarDeclaration(ISerializationContext context, JpLetVarDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpModel returns JpModel
	 *
	 * Constraint:
	 *     ((importSection=XImportSection? elements+=JpElement+ scripts=JpScript) | (importSection=XImportSection? scripts=JpScript) | scripts=JpScript)?
	 */
	protected void sequence_JpModel(ISerializationContext context, JpModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpPrefixOperation returns JpPrefixOperation
	 *
	 * Constraint:
	 *     {JpPrefixOperation}
	 */
	protected void sequence_JpPrefixOperation(ISerializationContext context, JpPrefixOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpRange returns JpPrefixOperation
	 *
	 * Constraint:
	 *     ((feature=[JvmIdentifiableElement|':'] operand=XAdditiveExpression) | feature=[JvmIdentifiableElement|':'])
	 */
	protected void sequence_JpRange(ISerializationContext context, JpPrefixOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpRange returns XBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=JpRange_XBinaryOperation_2_1_1_0_0 feature=[JvmIdentifiableElement|':'] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XBitwiseInclusiveOrExpression) | 
	 *         (
	 *             leftOperand=XBitwiseInclusiveOrExpression_XBinaryOperation_1_0_0_0 
	 *             feature=[JvmIdentifiableElement|OpInclusiveOr] 
	 *             rightOperand=XBitwiseExclusiveOrExpression
	 *         ) | 
	 *         (
	 *             leftOperand=XBitwiseExclusiveOrExpression_XBinaryOperation_1_0_0_0 
	 *             feature=[JvmIdentifiableElement|OpExclusiveOr] 
	 *             rightOperand=XBitwiseAndExpression
	 *         ) | 
	 *         (leftOperand=XBitwiseAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpBitwiseAnd] rightOperand=XEqualityExpression) | 
	 *         (leftOperand=XAssignment_XBinaryOperation_2_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment) | 
	 *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | 
	 *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | 
	 *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | 
	 *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | 
	 *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation)
	 *     )
	 */
	protected void sequence_JpRange_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(ISerializationContext context, XBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpRange returns XPostfixOperation
	 *
	 * Constraint:
	 *     (
	 *         (operand=JpRange_XPostfixOperation_2_1_0_0_0 feature=[JvmIdentifiableElement|':']) | 
	 *         (operand=XPostfixOperation_XPostfixOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpPostfix])
	 *     )
	 */
	protected void sequence_JpRange_XPostfixOperation(ISerializationContext context, XPostfixOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpScript returns JpScript
	 *
	 * Constraint:
	 *     (name=ValidID author=ID superType=JvmParameterizedTypeReference? operations+=Operation* scriptBody=ScriptBody)
	 */
	protected void sequence_JpScript(ISerializationContext context, JpScript semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpWithOpenAsCall returns JpWithOpenCall
	 *
	 * Constraint:
	 *     (
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (explicitOperationCall?='(' (featureCallArguments+=XExpression featureCallArguments+=XExpression*)?)?
	 *     )
	 */
	protected void sequence_JpWithOpenAsCall(ISerializationContext context, JpWithOpenCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpWithOpenAs
	 *     JpSingleStatement returns JpWithOpenAs
	 *     JpWithOpenAs returns JpWithOpenAs
	 *
	 * Constraint:
	 *     (open=JpWithOpenAsCall name=ValidID withExpression=JpStatementOrBlock)
	 */
	protected void sequence_JpWithOpenAs(ISerializationContext context, JpWithOpenAs semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__OPEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__OPEN));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__NAME));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__WITH_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_WITH_OPEN_AS__WITH_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJpWithOpenAsAccess().getOpenJpWithOpenAsCallParserRuleCall_2_0(), semanticObject.getOpen());
		feeder.accept(grammarAccess.getJpWithOpenAsAccess().getNameValidIDParserRuleCall_4_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJpWithOpenAsAccess().getWithExpressionJpStatementOrBlockParserRuleCall_5_0(), semanticObject.getWithExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Operation
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (name=ValidID (params+=FullJvmFormalParameter params+=FullJvmFormalParameter*)? type=JvmTypeReference? body=XBlockExpression)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpElement returns PackageDeclaration
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=JpElement*)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Property
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ValidID type=JvmTypeReference)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.FEATURE__NAME));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.FEATURE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.FEATURE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getNameValidIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getTypeJvmTypeReferenceParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ScriptBody returns ScriptBody
	 *
	 * Constraint:
	 *     expressions+=JpStatementOrBlock*
	 */
	protected void sequence_ScriptBody(ISerializationContext context, ScriptBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XBinaryOperation
	 *     JpSingleStatement returns XBinaryOperation
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns XBinaryOperation
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns XBinaryOperation
	 *     XAndExpression returns XBinaryOperation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XBitwiseInclusiveOrExpression returns XBinaryOperation
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XBitwiseExclusiveOrExpression returns XBinaryOperation
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XBitwiseAndExpression returns XBinaryOperation
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XPrimaryExpression returns XBinaryOperation
	 *     XExpressionOrVarDeclaration returns XBinaryOperation
	 *     XPostfixOperation returns XBinaryOperation
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns XBinaryOperation
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns XBinaryOperation
	 *     XAssignment returns XBinaryOperation
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns XBinaryOperation
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall returns XBinaryOperation
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns XBinaryOperation
	 *     XExpression returns XBinaryOperation
	 *     XOrExpression returns XBinaryOperation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XEqualityExpression returns XBinaryOperation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression returns XBinaryOperation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XBinaryOperation
	 *     XOtherOperatorExpression returns XBinaryOperation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XAdditiveExpression returns XBinaryOperation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XMultiplicativeExpression returns XBinaryOperation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XUnaryOperation returns XBinaryOperation
	 *     XCastedExpression returns XBinaryOperation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XBinaryOperation
	 *     XParenthesizedExpression returns XBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XBitwiseInclusiveOrExpression) | 
	 *         (
	 *             leftOperand=XBitwiseInclusiveOrExpression_XBinaryOperation_1_0_0_0 
	 *             feature=[JvmIdentifiableElement|OpInclusiveOr] 
	 *             rightOperand=XBitwiseExclusiveOrExpression
	 *         ) | 
	 *         (
	 *             leftOperand=XBitwiseExclusiveOrExpression_XBinaryOperation_1_0_0_0 
	 *             feature=[JvmIdentifiableElement|OpExclusiveOr] 
	 *             rightOperand=XBitwiseAndExpression
	 *         ) | 
	 *         (leftOperand=XBitwiseAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpBitwiseAnd] rightOperand=XEqualityExpression) | 
	 *         (leftOperand=XAssignment_XBinaryOperation_2_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment) | 
	 *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | 
	 *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | 
	 *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | 
	 *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | 
	 *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation)
	 *     )
	 */
	protected void sequence_XAdditiveExpression_XAndExpression_XAssignment_XBitwiseAndExpression_XBitwiseExclusiveOrExpression_XBitwiseInclusiveOrExpression_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(ISerializationContext context, XBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpConditionalExpression
	 *     JpSingleStatement returns JpConditionalExpression
	 *     JpRange returns JpConditionalExpression
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns JpConditionalExpression
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns JpConditionalExpression
	 *     XAndExpression returns JpConditionalExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XBitwiseInclusiveOrExpression returns JpConditionalExpression
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XBitwiseExclusiveOrExpression returns JpConditionalExpression
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XBitwiseAndExpression returns JpConditionalExpression
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XPrimaryExpression returns JpConditionalExpression
	 *     XExpressionOrVarDeclaration returns JpConditionalExpression
	 *     XPostfixOperation returns JpConditionalExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns JpConditionalExpression
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns JpConditionalExpression
	 *     XAssignment returns JpConditionalExpression
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns JpConditionalExpression
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns JpConditionalExpression
	 *     XMemberFeatureCall returns JpConditionalExpression
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns JpConditionalExpression
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns JpConditionalExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns JpConditionalExpression
	 *     XExpression returns JpConditionalExpression
	 *     XOrExpression returns JpConditionalExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XEqualityExpression returns JpConditionalExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XRelationalExpression returns JpConditionalExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns JpConditionalExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns JpConditionalExpression
	 *     XOtherOperatorExpression returns JpConditionalExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XAdditiveExpression returns JpConditionalExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XMultiplicativeExpression returns JpConditionalExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns JpConditionalExpression
	 *     XUnaryOperation returns JpConditionalExpression
	 *     XCastedExpression returns JpConditionalExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns JpConditionalExpression
	 *     XParenthesizedExpression returns JpConditionalExpression
	 *
	 * Constraint:
	 *     (if=XAssignment_JpConditionalExpression_2_1_0_0_0_0 then=XExpression else=XExpression)
	 */
	protected void sequence_XAssignment(ISerializationContext context, JpConditionalExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__IF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__IF));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__THEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__THEN));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__ELSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_CONDITIONAL_EXPRESSION__ELSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXAssignmentAccess().getJpConditionalExpressionIfAction_2_1_0_0_0_0(), semanticObject.getIf());
		feeder.accept(grammarAccess.getXAssignmentAccess().getThenXExpressionParserRuleCall_2_1_0_1_0(), semanticObject.getThen());
		feeder.accept(grammarAccess.getXAssignmentAccess().getElseXExpressionParserRuleCall_2_1_0_3_0(), semanticObject.getElse());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns JpAssignment
	 *     JpSingleStatement returns JpAssignment
	 *     JpRange returns JpAssignment
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns JpAssignment
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns JpAssignment
	 *     XAndExpression returns JpAssignment
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XBitwiseInclusiveOrExpression returns JpAssignment
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XBitwiseExclusiveOrExpression returns JpAssignment
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XBitwiseAndExpression returns JpAssignment
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XPrimaryExpression returns JpAssignment
	 *     XExpressionOrVarDeclaration returns JpAssignment
	 *     XPostfixOperation returns JpAssignment
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns JpAssignment
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns JpAssignment
	 *     XAssignment returns JpAssignment
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns JpAssignment
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns JpAssignment
	 *     XMemberFeatureCall returns JpAssignment
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns JpAssignment
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns JpAssignment
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns JpAssignment
	 *     XExpression returns JpAssignment
	 *     XOrExpression returns JpAssignment
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XEqualityExpression returns JpAssignment
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XRelationalExpression returns JpAssignment
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns JpAssignment
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns JpAssignment
	 *     XOtherOperatorExpression returns JpAssignment
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XAdditiveExpression returns JpAssignment
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XMultiplicativeExpression returns JpAssignment
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns JpAssignment
	 *     XUnaryOperation returns JpAssignment
	 *     XCastedExpression returns JpAssignment
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns JpAssignment
	 *     XParenthesizedExpression returns JpAssignment
	 *
	 * Constraint:
	 *     (
	 *         (feature=[JvmIdentifiableElement|FeatureCallID] indexes+=JpRange indexes+=JpRange* indexes+=XExpression* value=XAssignment) | 
	 *         (
	 *             assignable=XMemberFeatureCall_JpAssignment_1_0_0_0_0 
	 *             feature=[JvmIdentifiableElement|FeatureCallID] 
	 *             indexes+=JpRange 
	 *             indexes+=JpRange* 
	 *             indexes+=XExpression* 
	 *             value=XAssignment
	 *         )
	 *     )
	 */
	protected void sequence_XAssignment_XMemberFeatureCall(ISerializationContext context, JpAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XAssignment
	 *     JpSingleStatement returns XAssignment
	 *     JpRange returns XAssignment
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns XAssignment
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns XAssignment
	 *     XAndExpression returns XAssignment
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XBitwiseInclusiveOrExpression returns XAssignment
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XBitwiseExclusiveOrExpression returns XAssignment
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XBitwiseAndExpression returns XAssignment
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XPrimaryExpression returns XAssignment
	 *     XExpressionOrVarDeclaration returns XAssignment
	 *     XPostfixOperation returns XAssignment
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns XAssignment
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns XAssignment
	 *     XAssignment returns XAssignment
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns XAssignment
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns XAssignment
	 *     XMemberFeatureCall returns XAssignment
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns XAssignment
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns XAssignment
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns XAssignment
	 *     XExpression returns XAssignment
	 *     XOrExpression returns XAssignment
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XEqualityExpression returns XAssignment
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XRelationalExpression returns XAssignment
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XAssignment
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XAssignment
	 *     XOtherOperatorExpression returns XAssignment
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XAdditiveExpression returns XAssignment
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XMultiplicativeExpression returns XAssignment
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XAssignment
	 *     XUnaryOperation returns XAssignment
	 *     XCastedExpression returns XAssignment
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XAssignment
	 *     XParenthesizedExpression returns XAssignment
	 *
	 * Constraint:
	 *     (
	 *         (feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment) | 
	 *         (assignable=XMemberFeatureCall_XAssignment_1_1_0_0_0 explicitStatic?='::'? feature=[JvmIdentifiableElement|FeatureCallID] value=XAssignment)
	 *     )
	 */
	protected void sequence_XAssignment_XMemberFeatureCall(ISerializationContext context, XAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XBasicForLoopExpression
	 *     JpSingleStatement returns XBasicForLoopExpression
	 *     XBasicForLoopExpression returns XBasicForLoopExpression
	 *
	 * Constraint:
	 *     (
	 *         (initExpressions+=XExpressionOrVarDeclaration initExpressions+=XExpressionOrVarDeclaration*)? 
	 *         expression=XExpression? 
	 *         (updateExpressions+=XExpression updateExpressions+=XExpression*)? 
	 *         eachExpression=JpStatementOrBlock
	 *     )
	 */
	protected void sequence_XBasicForLoopExpression(ISerializationContext context, XBasicForLoopExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XBlockExpression
	 *     XBlockExpression returns XBlockExpression
	 *
	 * Constraint:
	 *     expressions+=JpStatementOrBlock*
	 */
	protected void sequence_XBlockExpression(ISerializationContext context, XBlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XCatchClause returns XCatchClause
	 *
	 * Constraint:
	 *     (declaredParam=FullJvmFormalParameter expression=XBlockExpression)
	 */
	protected void sequence_XCatchClause(ISerializationContext context, XCatchClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XCATCH_CLAUSE__DECLARED_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XCATCH_CLAUSE__DECLARED_PARAM));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XCATCH_CLAUSE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XCATCH_CLAUSE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0(), semanticObject.getDeclaredParam());
		feeder.accept(grammarAccess.getXCatchClauseAccess().getExpressionXBlockExpressionParserRuleCall_4_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XDoWhileExpression
	 *     JpSingleStatement returns XDoWhileExpression
	 *     XDoWhileExpression returns XDoWhileExpression
	 *
	 * Constraint:
	 *     (body=JpStatementOrBlock predicate=XExpression)
	 */
	protected void sequence_XDoWhileExpression(ISerializationContext context, XDoWhileExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__BODY));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__PREDICATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXDoWhileExpressionAccess().getBodyJpStatementOrBlockParserRuleCall_2_0(), semanticObject.getBody());
		feeder.accept(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0(), semanticObject.getPredicate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XFeatureCall
	 *     JpSingleStatement returns XFeatureCall
	 *     XFeatureCall returns XFeatureCall
	 *     JpFeatureCallWithArrayAccess returns XFeatureCall
	 *     JpFeatureCallWithArrayAccess.JpArrayAccessExpression_1_0_0 returns XFeatureCall
	 *     JpRange returns XFeatureCall
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns XFeatureCall
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns XFeatureCall
	 *     XAndExpression returns XFeatureCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XBitwiseInclusiveOrExpression returns XFeatureCall
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XBitwiseExclusiveOrExpression returns XFeatureCall
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XBitwiseAndExpression returns XFeatureCall
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XPrimaryExpression returns XFeatureCall
	 *     XExpressionOrVarDeclaration returns XFeatureCall
	 *     XPostfixOperation returns XFeatureCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns XFeatureCall
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns XFeatureCall
	 *     XAssignment returns XFeatureCall
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns XFeatureCall
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns XFeatureCall
	 *     XMemberFeatureCall returns XFeatureCall
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns XFeatureCall
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns XFeatureCall
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns XFeatureCall
	 *     XExpression returns XFeatureCall
	 *     XOrExpression returns XFeatureCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XEqualityExpression returns XFeatureCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XRelationalExpression returns XFeatureCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XFeatureCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XFeatureCall
	 *     XOtherOperatorExpression returns XFeatureCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XAdditiveExpression returns XFeatureCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XMultiplicativeExpression returns XFeatureCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XFeatureCall
	 *     XUnaryOperation returns XFeatureCall
	 *     XCastedExpression returns XFeatureCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XFeatureCall
	 *     XParenthesizedExpression returns XFeatureCall
	 *
	 * Constraint:
	 *     (
	 *         (typeArguments+=JvmArgumentTypeReference typeArguments+=JvmArgumentTypeReference*)? 
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (explicitOperationCall?='(' (featureCallArguments+=XShortClosure | (featureCallArguments+=XExpression featureCallArguments+=XExpression*))?)?
	 *     )
	 */
	protected void sequence_XFeatureCall(ISerializationContext context, XFeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XForLoopExpression
	 *     JpSingleStatement returns XForLoopExpression
	 *     XForLoopExpression returns XForLoopExpression
	 *
	 * Constraint:
	 *     (declaredParam=JvmFormalParameter forExpression=XExpression eachExpression=JpStatementOrBlock)
	 */
	protected void sequence_XForLoopExpression(ISerializationContext context, XForLoopExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__DECLARED_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__DECLARED_PARAM));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__FOR_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__FOR_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__EACH_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XFOR_LOOP_EXPRESSION__EACH_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0(), semanticObject.getDeclaredParam());
		feeder.accept(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0(), semanticObject.getForExpression());
		feeder.accept(grammarAccess.getXForLoopExpressionAccess().getEachExpressionJpStatementOrBlockParserRuleCall_3_0(), semanticObject.getEachExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XIfExpression
	 *     JpSingleStatement returns XIfExpression
	 *     XIfExpression returns XIfExpression
	 *
	 * Constraint:
	 *     (if=XExpression then=JpStatementOrBlock else=JpStatementOrBlock?)
	 */
	protected void sequence_XIfExpression(ISerializationContext context, XIfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XImportDeclaration returns JpImportDeclaration
	 *
	 * Constraint:
	 *     (importedNamespace=QualifiedName alias=ValidID)
	 */
	protected void sequence_XImportDeclaration(ISerializationContext context, JpImportDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XtypePackage.Literals.XIMPORT_DECLARATION__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XtypePackage.Literals.XIMPORT_DECLARATION__IMPORTED_NAMESPACE));
			if (transientValues.isValueTransient(semanticObject, JpPackage.Literals.JP_IMPORT_DECLARATION__ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JpPackage.Literals.JP_IMPORT_DECLARATION__ALIAS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_2_1_0(), semanticObject.getImportedNamespace());
		feeder.accept(grammarAccess.getXImportDeclarationAccess().getAliasValidIDParserRuleCall_1_2_3_0(), semanticObject.getAlias());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XImportDeclaration returns XImportDeclaration
	 *
	 * Constraint:
	 *     (
	 *         (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID)) | 
	 *         importedType=[JvmDeclaredType|QualifiedName]
	 *     )
	 */
	protected void sequence_XImportDeclaration(ISerializationContext context, XImportDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XMemberFeatureCall
	 *     JpSingleStatement returns XMemberFeatureCall
	 *     JpRange returns XMemberFeatureCall
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns XMemberFeatureCall
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns XMemberFeatureCall
	 *     XAndExpression returns XMemberFeatureCall
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XBitwiseInclusiveOrExpression returns XMemberFeatureCall
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XBitwiseExclusiveOrExpression returns XMemberFeatureCall
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XBitwiseAndExpression returns XMemberFeatureCall
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XPrimaryExpression returns XMemberFeatureCall
	 *     XExpressionOrVarDeclaration returns XMemberFeatureCall
	 *     XPostfixOperation returns XMemberFeatureCall
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns XMemberFeatureCall
	 *     XAssignment returns XMemberFeatureCall
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns XMemberFeatureCall
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns XMemberFeatureCall
	 *     XMemberFeatureCall returns XMemberFeatureCall
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns XMemberFeatureCall
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns XMemberFeatureCall
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns XMemberFeatureCall
	 *     XExpression returns XMemberFeatureCall
	 *     XOrExpression returns XMemberFeatureCall
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XEqualityExpression returns XMemberFeatureCall
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XRelationalExpression returns XMemberFeatureCall
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XMemberFeatureCall
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XMemberFeatureCall
	 *     XOtherOperatorExpression returns XMemberFeatureCall
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XAdditiveExpression returns XMemberFeatureCall
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XMultiplicativeExpression returns XMemberFeatureCall
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XMemberFeatureCall
	 *     XUnaryOperation returns XMemberFeatureCall
	 *     XCastedExpression returns XMemberFeatureCall
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XMemberFeatureCall
	 *     XParenthesizedExpression returns XMemberFeatureCall
	 *
	 * Constraint:
	 *     (
	 *         memberCallTarget=XMemberFeatureCall_XMemberFeatureCall_1_2_0_0_0 
	 *         (nullSafe?='?.' | explicitStatic?='::')? 
	 *         (typeArguments+=JvmArgumentTypeReference typeArguments+=JvmArgumentTypeReference*)? 
	 *         feature=[JvmIdentifiableElement|IdOrSuper] 
	 *         (explicitOperationCall?='(' (memberCallArguments+=XExpression memberCallArguments+=XExpression*)?)?
	 *     )
	 */
	protected void sequence_XMemberFeatureCall(ISerializationContext context, XMemberFeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XPostfixOperation
	 *     JpSingleStatement returns XPostfixOperation
	 *     JpRange.XPostfixOperation_2_1_0_0_0 returns XPostfixOperation
	 *     JpRange.XBinaryOperation_2_1_1_0_0 returns XPostfixOperation
	 *     XAndExpression returns XPostfixOperation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XBitwiseInclusiveOrExpression returns XPostfixOperation
	 *     XBitwiseInclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XBitwiseExclusiveOrExpression returns XPostfixOperation
	 *     XBitwiseExclusiveOrExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XBitwiseAndExpression returns XPostfixOperation
	 *     XBitwiseAndExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XPrimaryExpression returns XPostfixOperation
	 *     XExpressionOrVarDeclaration returns XPostfixOperation
	 *     XPostfixOperation returns XPostfixOperation
	 *     XPostfixOperation.XPostfixOperation_1_0_0_0 returns XPostfixOperation
	 *     XPostfixOperation.JpArrayAccessExpression_1_1_0_0 returns XPostfixOperation
	 *     XAssignment returns XPostfixOperation
	 *     XAssignment.JpConditionalExpression_2_1_0_0_0_0 returns XPostfixOperation
	 *     XAssignment.XBinaryOperation_2_1_1_0_0_0 returns XPostfixOperation
	 *     XMemberFeatureCall returns XPostfixOperation
	 *     XMemberFeatureCall.JpAssignment_1_0_0_0_0 returns XPostfixOperation
	 *     XMemberFeatureCall.XAssignment_1_1_0_0_0 returns XPostfixOperation
	 *     XMemberFeatureCall.XMemberFeatureCall_1_2_0_0_0 returns XPostfixOperation
	 *     XExpression returns XPostfixOperation
	 *     XOrExpression returns XPostfixOperation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XEqualityExpression returns XPostfixOperation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XRelationalExpression returns XPostfixOperation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XPostfixOperation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XPostfixOperation
	 *     XOtherOperatorExpression returns XPostfixOperation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XAdditiveExpression returns XPostfixOperation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XMultiplicativeExpression returns XPostfixOperation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XPostfixOperation
	 *     XUnaryOperation returns XPostfixOperation
	 *     XCastedExpression returns XPostfixOperation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XPostfixOperation
	 *     XParenthesizedExpression returns XPostfixOperation
	 *
	 * Constraint:
	 *     (operand=XPostfixOperation_XPostfixOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpPostfix])
	 */
	protected void sequence_XPostfixOperation(ISerializationContext context, XPostfixOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XPOSTFIX_OPERATION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XPOSTFIX_OPERATION__OPERAND));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0_0(), semanticObject.getOperand());
		feeder.accept(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementOpPostfixParserRuleCall_1_0_0_1_0_1(), semanticObject.eGet(XbasePackage.Literals.XABSTRACT_FEATURE_CALL__FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XSynchronizedExpression
	 *     JpSingleStatement returns XSynchronizedExpression
	 *     XSynchronizedExpression returns XSynchronizedExpression
	 *
	 * Constraint:
	 *     (param=XExpression expression=XBlockExpression)
	 */
	protected void sequence_XSynchronizedExpression(ISerializationContext context, XSynchronizedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0(), semanticObject.getParam());
		feeder.accept(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXBlockExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XTryCatchFinallyExpression
	 *     JpSingleStatement returns XTryCatchFinallyExpression
	 *     XTryCatchFinallyExpression returns XTryCatchFinallyExpression
	 *
	 * Constraint:
	 *     (expression=XBlockExpression ((catchClauses+=XCatchClause+ finallyExpression=XBlockExpression?) | finallyExpression=XBlockExpression))
	 */
	protected void sequence_XTryCatchFinallyExpression(ISerializationContext context, XTryCatchFinallyExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JpStatementOrBlock returns XWhileExpression
	 *     JpSingleStatement returns XWhileExpression
	 *     XWhileExpression returns XWhileExpression
	 *
	 * Constraint:
	 *     (predicate=XExpression body=JpStatementOrBlock)
	 */
	protected void sequence_XWhileExpression(ISerializationContext context, XWhileExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XbasePackage.Literals.XABSTRACT_WHILE_EXPRESSION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getXWhileExpressionAccess().getBodyJpStatementOrBlockParserRuleCall_5_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
}
