/**
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.jp.impl;

import cn.simbaba.mydsl.jp.JpArrayConstructorCall;
import cn.simbaba.mydsl.jp.JpArrayDimension;
import cn.simbaba.mydsl.jp.JpPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmType;

import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XListLiteral;

import org.eclipse.xtext.xbase.impl.XExpressionImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Array Constructor Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cn.simbaba.mydsl.jp.impl.JpArrayConstructorCallImpl#getType <em>Type</em>}</li>
 *   <li>{@link cn.simbaba.mydsl.jp.impl.JpArrayConstructorCallImpl#getDimensions <em>Dimensions</em>}</li>
 *   <li>{@link cn.simbaba.mydsl.jp.impl.JpArrayConstructorCallImpl#getIndexes <em>Indexes</em>}</li>
 *   <li>{@link cn.simbaba.mydsl.jp.impl.JpArrayConstructorCallImpl#getArrayLiteral <em>Array Literal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JpArrayConstructorCallImpl extends XExpressionImpl implements JpArrayConstructorCall
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected JvmType type;

  /**
   * The cached value of the '{@link #getDimensions() <em>Dimensions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDimensions()
   * @generated
   * @ordered
   */
  protected EList<JpArrayDimension> dimensions;

  /**
   * The cached value of the '{@link #getIndexes() <em>Indexes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexes()
   * @generated
   * @ordered
   */
  protected EList<XExpression> indexes;

  /**
   * The cached value of the '{@link #getArrayLiteral() <em>Array Literal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayLiteral()
   * @generated
   * @ordered
   */
  protected XListLiteral arrayLiteral;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JpArrayConstructorCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JpPackage.Literals.JP_ARRAY_CONSTRUCTOR_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmType getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (JvmType)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmType basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(JvmType newType)
  {
    JvmType oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JpArrayDimension> getDimensions()
  {
    if (dimensions == null)
    {
      dimensions = new EObjectContainmentEList<JpArrayDimension>(JpArrayDimension.class, this, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS);
    }
    return dimensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XExpression> getIndexes()
  {
    if (indexes == null)
    {
      indexes = new EObjectContainmentEList<XExpression>(XExpression.class, this, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES);
    }
    return indexes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XListLiteral getArrayLiteral()
  {
    return arrayLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayLiteral(XListLiteral newArrayLiteral, NotificationChain msgs)
  {
    XListLiteral oldArrayLiteral = arrayLiteral;
    arrayLiteral = newArrayLiteral;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL, oldArrayLiteral, newArrayLiteral);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayLiteral(XListLiteral newArrayLiteral)
  {
    if (newArrayLiteral != arrayLiteral)
    {
      NotificationChain msgs = null;
      if (arrayLiteral != null)
        msgs = ((InternalEObject)arrayLiteral).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL, null, msgs);
      if (newArrayLiteral != null)
        msgs = ((InternalEObject)newArrayLiteral).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL, null, msgs);
      msgs = basicSetArrayLiteral(newArrayLiteral, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL, newArrayLiteral, newArrayLiteral));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS:
        return ((InternalEList<?>)getDimensions()).basicRemove(otherEnd, msgs);
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES:
        return ((InternalEList<?>)getIndexes()).basicRemove(otherEnd, msgs);
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL:
        return basicSetArrayLiteral(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS:
        return getDimensions();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES:
        return getIndexes();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL:
        return getArrayLiteral();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE:
        setType((JvmType)newValue);
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS:
        getDimensions().clear();
        getDimensions().addAll((Collection<? extends JpArrayDimension>)newValue);
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES:
        getIndexes().clear();
        getIndexes().addAll((Collection<? extends XExpression>)newValue);
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL:
        setArrayLiteral((XListLiteral)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE:
        setType((JvmType)null);
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS:
        getDimensions().clear();
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES:
        getIndexes().clear();
        return;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL:
        setArrayLiteral((XListLiteral)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__TYPE:
        return type != null;
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS:
        return dimensions != null && !dimensions.isEmpty();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__INDEXES:
        return indexes != null && !indexes.isEmpty();
      case JpPackage.JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL:
        return arrayLiteral != null;
    }
    return super.eIsSet(featureID);
  }

} //JpArrayConstructorCallImpl
