/**
 * generated by Xtext 2.25.0
 */
package cn.simbaba.mydsl.jp.impl;

import cn.simbaba.mydsl.jp.Feature;
import cn.simbaba.mydsl.jp.JpAdditionalVariableDeclaration;
import cn.simbaba.mydsl.jp.JpArrayAccessExpression;
import cn.simbaba.mydsl.jp.JpArrayConstructorCall;
import cn.simbaba.mydsl.jp.JpArrayDimension;
import cn.simbaba.mydsl.jp.JpArrayLiteral;
import cn.simbaba.mydsl.jp.JpAssignment;
import cn.simbaba.mydsl.jp.JpBreakStatement;
import cn.simbaba.mydsl.jp.JpClass;
import cn.simbaba.mydsl.jp.JpConditionalExpression;
import cn.simbaba.mydsl.jp.JpContinueStatement;
import cn.simbaba.mydsl.jp.JpElement;
import cn.simbaba.mydsl.jp.JpFactory;
import cn.simbaba.mydsl.jp.JpImportDeclaration;
import cn.simbaba.mydsl.jp.JpIndex;
import cn.simbaba.mydsl.jp.JpLetVarDeclaration;
import cn.simbaba.mydsl.jp.JpModel;
import cn.simbaba.mydsl.jp.JpPackage;
import cn.simbaba.mydsl.jp.JpPrefixOperation;
import cn.simbaba.mydsl.jp.JpScript;
import cn.simbaba.mydsl.jp.JpWithOpenAs;
import cn.simbaba.mydsl.jp.JpWithOpenCall;
import cn.simbaba.mydsl.jp.Operation;
import cn.simbaba.mydsl.jp.PackageDeclaration;
import cn.simbaba.mydsl.jp.Property;
import cn.simbaba.mydsl.jp.ScriptBody;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.xtext.common.types.TypesPackage;

import org.eclipse.xtext.xbase.XbasePackage;

import org.eclipse.xtext.xtype.XtypePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JpPackageImpl extends EPackageImpl implements JpPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpScriptEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass packageDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpClassEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass featureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpArrayDimensionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scriptBodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpContinueStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpBreakStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpWithOpenCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpArrayConstructorCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpArrayLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpArrayAccessExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpPrefixOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpIndexEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpLetVarDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpAdditionalVariableDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpWithOpenAsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpImportDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jpConditionalExpressionEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see cn.simbaba.mydsl.jp.JpPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private JpPackageImpl()
  {
    super(eNS_URI, JpFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link JpPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static JpPackage init()
  {
    if (isInited) return (JpPackage)EPackage.Registry.INSTANCE.getEPackage(JpPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredJpPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    JpPackageImpl theJpPackage = registeredJpPackage instanceof JpPackageImpl ? (JpPackageImpl)registeredJpPackage : new JpPackageImpl();

    isInited = true;

    // Initialize simple dependencies
    TypesPackage.eINSTANCE.eClass();
    XbasePackage.eINSTANCE.eClass();
    XtypePackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theJpPackage.createPackageContents();

    // Initialize created meta-data
    theJpPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theJpPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(JpPackage.eNS_URI, theJpPackage);
    return theJpPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpModel()
  {
    return jpModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpModel_ImportSection()
  {
    return (EReference)jpModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpModel_Elements()
  {
    return (EReference)jpModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpModel_Scripts()
  {
    return (EReference)jpModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpScript()
  {
    return jpScriptEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJpScript_Name()
  {
    return (EAttribute)jpScriptEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJpScript_Author()
  {
    return (EAttribute)jpScriptEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpScript_SuperType()
  {
    return (EReference)jpScriptEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpScript_Operations()
  {
    return (EReference)jpScriptEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpScript_ScriptBody()
  {
    return (EReference)jpScriptEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpElement()
  {
    return jpElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJpElement_Name()
  {
    return (EAttribute)jpElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPackageDeclaration()
  {
    return packageDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPackageDeclaration_Elements()
  {
    return (EReference)packageDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpClass()
  {
    return jpClassEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpClass_SuperType()
  {
    return (EReference)jpClassEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpClass_Features()
  {
    return (EReference)jpClassEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFeature()
  {
    return featureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFeature_Name()
  {
    return (EAttribute)featureEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFeature_Type()
  {
    return (EReference)featureEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProperty()
  {
    return propertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperation()
  {
    return operationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperation_Params()
  {
    return (EReference)operationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperation_Body()
  {
    return (EReference)operationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpArrayDimension()
  {
    return jpArrayDimensionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScriptBody()
  {
    return scriptBodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpContinueStatement()
  {
    return jpContinueStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpBreakStatement()
  {
    return jpBreakStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpWithOpenCall()
  {
    return jpWithOpenCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpArrayConstructorCall()
  {
    return jpArrayConstructorCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayConstructorCall_Type()
  {
    return (EReference)jpArrayConstructorCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayConstructorCall_Dimensions()
  {
    return (EReference)jpArrayConstructorCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayConstructorCall_Indexes()
  {
    return (EReference)jpArrayConstructorCallEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayConstructorCall_ArrayLiteral()
  {
    return (EReference)jpArrayConstructorCallEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpArrayLiteral()
  {
    return jpArrayLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpArrayAccessExpression()
  {
    return jpArrayAccessExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayAccessExpression_Array()
  {
    return (EReference)jpArrayAccessExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpArrayAccessExpression_Indexes()
  {
    return (EReference)jpArrayAccessExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpPrefixOperation()
  {
    return jpPrefixOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpIndex()
  {
    return jpIndexEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpIndex_Indexes()
  {
    return (EReference)jpIndexEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpLetVarDeclaration()
  {
    return jpLetVarDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpLetVarDeclaration_Other()
  {
    return (EReference)jpLetVarDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpAdditionalVariableDeclaration()
  {
    return jpAdditionalVariableDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpWithOpenAs()
  {
    return jpWithOpenAsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpWithOpenAs_Open()
  {
    return (EReference)jpWithOpenAsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJpWithOpenAs_Name()
  {
    return (EAttribute)jpWithOpenAsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpWithOpenAs_WithExpression()
  {
    return (EReference)jpWithOpenAsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpImportDeclaration()
  {
    return jpImportDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJpImportDeclaration_Alias()
  {
    return (EAttribute)jpImportDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpAssignment()
  {
    return jpAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpAssignment_Indexes()
  {
    return (EReference)jpAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJpConditionalExpression()
  {
    return jpConditionalExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpConditionalExpression_If()
  {
    return (EReference)jpConditionalExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpConditionalExpression_Then()
  {
    return (EReference)jpConditionalExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJpConditionalExpression_Else()
  {
    return (EReference)jpConditionalExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JpFactory getJpFactory()
  {
    return (JpFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    jpModelEClass = createEClass(JP_MODEL);
    createEReference(jpModelEClass, JP_MODEL__IMPORT_SECTION);
    createEReference(jpModelEClass, JP_MODEL__ELEMENTS);
    createEReference(jpModelEClass, JP_MODEL__SCRIPTS);

    jpScriptEClass = createEClass(JP_SCRIPT);
    createEAttribute(jpScriptEClass, JP_SCRIPT__NAME);
    createEAttribute(jpScriptEClass, JP_SCRIPT__AUTHOR);
    createEReference(jpScriptEClass, JP_SCRIPT__SUPER_TYPE);
    createEReference(jpScriptEClass, JP_SCRIPT__OPERATIONS);
    createEReference(jpScriptEClass, JP_SCRIPT__SCRIPT_BODY);

    jpElementEClass = createEClass(JP_ELEMENT);
    createEAttribute(jpElementEClass, JP_ELEMENT__NAME);

    packageDeclarationEClass = createEClass(PACKAGE_DECLARATION);
    createEReference(packageDeclarationEClass, PACKAGE_DECLARATION__ELEMENTS);

    jpClassEClass = createEClass(JP_CLASS);
    createEReference(jpClassEClass, JP_CLASS__SUPER_TYPE);
    createEReference(jpClassEClass, JP_CLASS__FEATURES);

    featureEClass = createEClass(FEATURE);
    createEAttribute(featureEClass, FEATURE__NAME);
    createEReference(featureEClass, FEATURE__TYPE);

    propertyEClass = createEClass(PROPERTY);

    operationEClass = createEClass(OPERATION);
    createEReference(operationEClass, OPERATION__PARAMS);
    createEReference(operationEClass, OPERATION__BODY);

    jpArrayDimensionEClass = createEClass(JP_ARRAY_DIMENSION);

    scriptBodyEClass = createEClass(SCRIPT_BODY);

    jpContinueStatementEClass = createEClass(JP_CONTINUE_STATEMENT);

    jpBreakStatementEClass = createEClass(JP_BREAK_STATEMENT);

    jpWithOpenCallEClass = createEClass(JP_WITH_OPEN_CALL);

    jpArrayConstructorCallEClass = createEClass(JP_ARRAY_CONSTRUCTOR_CALL);
    createEReference(jpArrayConstructorCallEClass, JP_ARRAY_CONSTRUCTOR_CALL__TYPE);
    createEReference(jpArrayConstructorCallEClass, JP_ARRAY_CONSTRUCTOR_CALL__DIMENSIONS);
    createEReference(jpArrayConstructorCallEClass, JP_ARRAY_CONSTRUCTOR_CALL__INDEXES);
    createEReference(jpArrayConstructorCallEClass, JP_ARRAY_CONSTRUCTOR_CALL__ARRAY_LITERAL);

    jpArrayLiteralEClass = createEClass(JP_ARRAY_LITERAL);

    jpArrayAccessExpressionEClass = createEClass(JP_ARRAY_ACCESS_EXPRESSION);
    createEReference(jpArrayAccessExpressionEClass, JP_ARRAY_ACCESS_EXPRESSION__ARRAY);
    createEReference(jpArrayAccessExpressionEClass, JP_ARRAY_ACCESS_EXPRESSION__INDEXES);

    jpPrefixOperationEClass = createEClass(JP_PREFIX_OPERATION);

    jpIndexEClass = createEClass(JP_INDEX);
    createEReference(jpIndexEClass, JP_INDEX__INDEXES);

    jpLetVarDeclarationEClass = createEClass(JP_LET_VAR_DECLARATION);
    createEReference(jpLetVarDeclarationEClass, JP_LET_VAR_DECLARATION__OTHER);

    jpAdditionalVariableDeclarationEClass = createEClass(JP_ADDITIONAL_VARIABLE_DECLARATION);

    jpWithOpenAsEClass = createEClass(JP_WITH_OPEN_AS);
    createEReference(jpWithOpenAsEClass, JP_WITH_OPEN_AS__OPEN);
    createEAttribute(jpWithOpenAsEClass, JP_WITH_OPEN_AS__NAME);
    createEReference(jpWithOpenAsEClass, JP_WITH_OPEN_AS__WITH_EXPRESSION);

    jpImportDeclarationEClass = createEClass(JP_IMPORT_DECLARATION);
    createEAttribute(jpImportDeclarationEClass, JP_IMPORT_DECLARATION__ALIAS);

    jpAssignmentEClass = createEClass(JP_ASSIGNMENT);
    createEReference(jpAssignmentEClass, JP_ASSIGNMENT__INDEXES);

    jpConditionalExpressionEClass = createEClass(JP_CONDITIONAL_EXPRESSION);
    createEReference(jpConditionalExpressionEClass, JP_CONDITIONAL_EXPRESSION__IF);
    createEReference(jpConditionalExpressionEClass, JP_CONDITIONAL_EXPRESSION__THEN);
    createEReference(jpConditionalExpressionEClass, JP_CONDITIONAL_EXPRESSION__ELSE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    XtypePackage theXtypePackage = (XtypePackage)EPackage.Registry.INSTANCE.getEPackage(XtypePackage.eNS_URI);
    TypesPackage theTypesPackage = (TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);
    XbasePackage theXbasePackage = (XbasePackage)EPackage.Registry.INSTANCE.getEPackage(XbasePackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    packageDeclarationEClass.getESuperTypes().add(this.getJpElement());
    jpClassEClass.getESuperTypes().add(this.getJpElement());
    propertyEClass.getESuperTypes().add(this.getFeature());
    operationEClass.getESuperTypes().add(this.getFeature());
    scriptBodyEClass.getESuperTypes().add(theXbasePackage.getXBlockExpression());
    jpContinueStatementEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpBreakStatementEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpWithOpenCallEClass.getESuperTypes().add(theXbasePackage.getXFeatureCall());
    jpArrayConstructorCallEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpArrayLiteralEClass.getESuperTypes().add(theXbasePackage.getXListLiteral());
    jpArrayAccessExpressionEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpPrefixOperationEClass.getESuperTypes().add(theXbasePackage.getXPostfixOperation());
    jpIndexEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpLetVarDeclarationEClass.getESuperTypes().add(theXbasePackage.getXVariableDeclaration());
    jpAdditionalVariableDeclarationEClass.getESuperTypes().add(theXbasePackage.getXVariableDeclaration());
    jpWithOpenAsEClass.getESuperTypes().add(theXbasePackage.getXExpression());
    jpImportDeclarationEClass.getESuperTypes().add(theXtypePackage.getXImportDeclaration());
    jpAssignmentEClass.getESuperTypes().add(theXbasePackage.getXAssignment());
    jpConditionalExpressionEClass.getESuperTypes().add(theXbasePackage.getXExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(jpModelEClass, JpModel.class, "JpModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpModel_ImportSection(), theXtypePackage.getXImportSection(), null, "importSection", null, 0, 1, JpModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpModel_Elements(), this.getJpElement(), null, "elements", null, 0, -1, JpModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpModel_Scripts(), this.getJpScript(), null, "scripts", null, 0, 1, JpModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpScriptEClass, JpScript.class, "JpScript", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJpScript_Name(), ecorePackage.getEString(), "name", null, 0, 1, JpScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJpScript_Author(), ecorePackage.getEString(), "author", null, 0, 1, JpScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpScript_SuperType(), theTypesPackage.getJvmParameterizedTypeReference(), null, "superType", null, 0, 1, JpScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpScript_Operations(), this.getOperation(), null, "operations", null, 0, -1, JpScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpScript_ScriptBody(), theXbasePackage.getXBlockExpression(), null, "scriptBody", null, 0, 1, JpScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpElementEClass, JpElement.class, "JpElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJpElement_Name(), ecorePackage.getEString(), "name", null, 0, 1, JpElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(packageDeclarationEClass, PackageDeclaration.class, "PackageDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPackageDeclaration_Elements(), this.getJpElement(), null, "elements", null, 0, -1, PackageDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpClassEClass, JpClass.class, "JpClass", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpClass_SuperType(), theTypesPackage.getJvmParameterizedTypeReference(), null, "superType", null, 0, 1, JpClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpClass_Features(), this.getFeature(), null, "features", null, 0, -1, JpClass.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(featureEClass, Feature.class, "Feature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFeature_Name(), ecorePackage.getEString(), "name", null, 0, 1, Feature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFeature_Type(), theTypesPackage.getJvmTypeReference(), null, "type", null, 0, 1, Feature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(propertyEClass, Property.class, "Property", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(operationEClass, Operation.class, "Operation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOperation_Params(), theTypesPackage.getJvmFormalParameter(), null, "params", null, 0, -1, Operation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperation_Body(), theXbasePackage.getXExpression(), null, "body", null, 0, 1, Operation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpArrayDimensionEClass, JpArrayDimension.class, "JpArrayDimension", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(scriptBodyEClass, ScriptBody.class, "ScriptBody", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpContinueStatementEClass, JpContinueStatement.class, "JpContinueStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpBreakStatementEClass, JpBreakStatement.class, "JpBreakStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpWithOpenCallEClass, JpWithOpenCall.class, "JpWithOpenCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpArrayConstructorCallEClass, JpArrayConstructorCall.class, "JpArrayConstructorCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpArrayConstructorCall_Type(), theTypesPackage.getJvmType(), null, "type", null, 0, 1, JpArrayConstructorCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpArrayConstructorCall_Dimensions(), this.getJpArrayDimension(), null, "dimensions", null, 0, -1, JpArrayConstructorCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpArrayConstructorCall_Indexes(), theXbasePackage.getXExpression(), null, "indexes", null, 0, -1, JpArrayConstructorCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpArrayConstructorCall_ArrayLiteral(), theXbasePackage.getXListLiteral(), null, "arrayLiteral", null, 0, 1, JpArrayConstructorCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpArrayLiteralEClass, JpArrayLiteral.class, "JpArrayLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpArrayAccessExpressionEClass, JpArrayAccessExpression.class, "JpArrayAccessExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpArrayAccessExpression_Array(), theXbasePackage.getXExpression(), null, "array", null, 0, 1, JpArrayAccessExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpArrayAccessExpression_Indexes(), theXbasePackage.getXExpression(), null, "indexes", null, 0, -1, JpArrayAccessExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpPrefixOperationEClass, JpPrefixOperation.class, "JpPrefixOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpIndexEClass, JpIndex.class, "JpIndex", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpIndex_Indexes(), theXbasePackage.getXExpression(), null, "indexes", null, 0, -1, JpIndex.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpLetVarDeclarationEClass, JpLetVarDeclaration.class, "JpLetVarDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpLetVarDeclaration_Other(), theXbasePackage.getXVariableDeclaration(), null, "other", null, 0, -1, JpLetVarDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpAdditionalVariableDeclarationEClass, JpAdditionalVariableDeclaration.class, "JpAdditionalVariableDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(jpWithOpenAsEClass, JpWithOpenAs.class, "JpWithOpenAs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpWithOpenAs_Open(), theXbasePackage.getXFeatureCall(), null, "open", null, 0, 1, JpWithOpenAs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJpWithOpenAs_Name(), ecorePackage.getEString(), "name", null, 0, 1, JpWithOpenAs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpWithOpenAs_WithExpression(), theXbasePackage.getXExpression(), null, "withExpression", null, 0, 1, JpWithOpenAs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpImportDeclarationEClass, JpImportDeclaration.class, "JpImportDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJpImportDeclaration_Alias(), ecorePackage.getEString(), "alias", null, 0, 1, JpImportDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpAssignmentEClass, JpAssignment.class, "JpAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpAssignment_Indexes(), theXbasePackage.getXExpression(), null, "indexes", null, 0, -1, JpAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jpConditionalExpressionEClass, JpConditionalExpression.class, "JpConditionalExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJpConditionalExpression_If(), theXbasePackage.getXExpression(), null, "if", null, 0, 1, JpConditionalExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpConditionalExpression_Then(), theXbasePackage.getXExpression(), null, "then", null, 0, 1, JpConditionalExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJpConditionalExpression_Else(), theXbasePackage.getXExpression(), null, "else", null, 0, 1, JpConditionalExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //JpPackageImpl
